<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE abiword PUBLIC "-//ABISOURCE//DTD AWML 1.0 Strict//EN" "http://www.abisource.com/awml.dtd">
<abiword template="false" xmlns:ct="http://www.abisource.com/changetracking.dtd" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:math="http://www.w3.org/1998/Math/MathML" xid-max="2475" xmlns:dc="http://purl.org/dc/elements/1.1/" fileformat="1.1" xmlns:svg="http://www.w3.org/2000/svg" xmlns:awml="http://www.abisource.com/awml.dtd" xmlns="http://www.abisource.com/awml.dtd" xmlns:xlink="http://www.w3.org/1999/xlink" version="3.0.0" xml:space="preserve" props="dom-dir:ltr; document-footnote-restart-section:0; document-endnote-type:numeric; document-endnote-place-enddoc:1; document-endnote-initial:1; lang:en-US; document-endnote-restart-section:0; document-footnote-restart-page:0; document-footnote-type:numeric; document-footnote-initial:1; document-endnote-place-endsection:0">
<!-- ======================================================================== -->
<!-- This file is an AbiWord document.                                        -->
<!-- AbiWord is a free, Open Source word processor.                           -->
<!-- More information about AbiWord is available at http://www.abisource.com/ -->
<!-- You should not edit this file by hand.                                   -->
<!-- ======================================================================== -->

<metadata>
<m key="abiword.generator">AbiWord</m>
<m key="dc.format">application/x-abiword</m>
</metadata>
<rdf>
</rdf>
<styles>
<s type="P" name="Normal" basedon="" followedby="Current Settings" props="font-family:Liberation Serif; margin-top:0pt; font-variant:normal; margin-left:0pt; text-indent:0in; widows:2; font-style:normal; font-weight:normal; text-decoration:none; color:000000; line-height:1.0; text-align:left; margin-bottom:0pt; text-position:normal; margin-right:0pt; bgcolor:transparent; font-size:12pt; font-stretch:normal"/>
</styles>
<pagesize pagetype="A4" orientation="portrait" width="210.000000" height="297.000000" units="mm" page-scale="1.000000"/>
<section xid="1">
<p style="Normal" xid="2"><c></c></p>
<p style="Normal" xid="3">##------------------------------------------------------------##</p>
<p style="Normal" xid="4"># </p>
<p style="Normal" xid="5" props="text-align:left; dom-dir:ltr"># The multiple-architecture stuff in this file is pretty</p>
<p style="Normal" xid="6" props="text-align:left; dom-dir:ltr"># cryptic.  Read docs/internals/multiple-architectures.txt</p>
<p style="Normal" xid="7" props="text-align:left; dom-dir:ltr"># for at least a partial explanation of what is going on.</p>
<p style="Normal" xid="8">#</p>
<p style="Normal" xid="9">##------------------------------------------------------------##</p>
<p style="Normal" xid="10"><c></c></p>
<p style="Normal" xid="11" props="text-align:left; dom-dir:ltr"># Process this file with autoconf to produce a configure script.</p>
<p style="Normal" xid="12" props="text-align:left; dom-dir:ltr">AC_INIT([Valgrind],[3.8.1],[valgrind-users@lists.sourceforge.net])</p>
<p style="Normal" xid="13" props="text-align:left; dom-dir:ltr">AC_CONFIG_SRCDIR(coregrind/m_main.c)</p>
<p style="Normal" xid="14" props="text-align:left; dom-dir:ltr">AC_CONFIG_HEADERS([config.h])</p>
<p style="Normal" xid="15" props="text-align:left; dom-dir:ltr">AM_INIT_AUTOMAKE([foreign])</p>
<p style="Normal" xid="16"><c></c></p>
<p style="Normal" xid="17" props="text-align:left; dom-dir:ltr">AM_MAINTAINER_MODE</p>
<p style="Normal" xid="18"><c></c></p>
<p style="Normal" xid="19">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="20" props="text-align:left; dom-dir:ltr"># Checks for various programs.</p>
<p style="Normal" xid="21">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="22" props="text-align:left; dom-dir:ltr">CFLAGS="-Wno-long-long $CFLAGS"</p>
<p style="Normal" xid="23"><c></c></p>
<p style="Normal" xid="24" props="text-align:left; dom-dir:ltr">AC_PROG_LN_S</p>
<p style="Normal" xid="25" props="text-align:left; dom-dir:ltr">AC_PROG_CC</p>
<p style="Normal" xid="26" props="text-align:left; dom-dir:ltr">AM_PROG_CC_C_O</p>
<p style="Normal" xid="27" props="text-align:left; dom-dir:ltr">AC_PROG_CPP</p>
<p style="Normal" xid="28" props="text-align:left; dom-dir:ltr">AC_PROG_CXX</p>
<p style="Normal" xid="29" props="text-align:left; dom-dir:ltr"># AC_PROG_OBJC apparently causes problems on older Linux distros (eg. with</p>
<p style="Normal" xid="30" props="text-align:left; dom-dir:ltr"># autoconf 2.59).  If we ever have any Objective-C code in the Valgrind code</p>
<p style="Normal" xid="31" props="text-align:left; dom-dir:ltr"># base (eg. most likely as Darwin-specific tests) we'll need one of the</p>
<p style="Normal" xid="32" props="text-align:left; dom-dir:ltr"># following:</p>
<p style="Normal" xid="33" props="text-align:left; dom-dir:ltr"># - put AC_PROG_OBJC in a Darwin-specific part of this file</p>
<p style="Normal" xid="34" props="text-align:left; dom-dir:ltr"># - Use AC_PROG_OBJC here and up the minimum autoconf version</p>
<p style="Normal" xid="35" props="text-align:left; dom-dir:ltr"># - Use the following, which is apparently equivalent:</p>
<p style="Normal" xid="36" props="text-align:left; dom-dir:ltr">#     m4_ifdef([AC_PROG_OBJC],</p>
<p style="Normal" xid="37" props="text-align:left; dom-dir:ltr">#        [AC_PROG_OBJC],</p>
<p style="Normal" xid="38" props="text-align:left; dom-dir:ltr">#        [AC_CHECK_TOOL([OBJC], [gcc])</p>
<p style="Normal" xid="39" props="text-align:left; dom-dir:ltr">#         AC_SUBST([OBJC])</p>
<p style="Normal" xid="40" props="text-align:left; dom-dir:ltr">#         AC_SUBST([OBJCFLAGS])</p>
<p style="Normal" xid="41">#        ])</p>
<p style="Normal" xid="42" props="text-align:left; dom-dir:ltr">AC_PROG_RANLIB</p>
<p style="Normal" xid="43" props="text-align:left; dom-dir:ltr"># provide a very basic definition for AC_PROG_SED if it's not provided by</p>
<p style="Normal" xid="44" props="text-align:left; dom-dir:ltr"># autoconf (as e.g. in autoconf 2.59).</p>
<p style="Normal" xid="45" props="text-align:left; dom-dir:ltr">m4_ifndef([AC_PROG_SED],</p>
<p style="Normal" xid="46" props="text-align:left; dom-dir:ltr">          [AC_DEFUN([AC_PROG_SED],</p>
<p style="Normal" xid="47" props="text-align:left; dom-dir:ltr">                    [AC_ARG_VAR([SED])</p>
<p style="Normal" xid="48" props="text-align:left; dom-dir:ltr">                     AC_CHECK_PROGS([SED],[gsed sed])])])</p>
<p style="Normal" xid="49" props="text-align:left; dom-dir:ltr">AC_PROG_SED</p>
<p style="Normal" xid="50"><c></c></p>
<p style="Normal" xid="51" props="text-align:left; dom-dir:ltr"># If no AR variable was specified, look up the name of the archiver. Otherwise</p>
<p style="Normal" xid="52" props="text-align:left; dom-dir:ltr"># do not touch the AR variable.</p>
<p style="Normal" xid="53" props="text-align:left; dom-dir:ltr">if test "x$AR" = "x"; then</p>
<p style="Normal" xid="54" props="text-align:left; dom-dir:ltr">  AC_PATH_PROGS([AR], [`echo $LD | $SED 's/ld$/ar/'` "ar"], [ar])</p>
<p style="Normal" xid="55" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="56" props="text-align:left; dom-dir:ltr">AC_ARG_VAR([AR],[Archiver command])</p>
<p style="Normal" xid="57"><c></c></p>
<p style="Normal" xid="58" props="text-align:left; dom-dir:ltr"># Check for the compiler support</p>
<p style="Normal" xid="59" props="text-align:left; dom-dir:ltr">if test "${GCC}" != "yes" ; then</p>
<p style="Normal" xid="60" props="text-align:left; dom-dir:ltr">   AC_MSG_ERROR([Valgrind relies on GCC to be compiled])</p>
<p style="Normal" xid="61" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="62"><c></c></p>
<p style="Normal" xid="63" props="text-align:left; dom-dir:ltr"># figure out where perl lives</p>
<p style="Normal" xid="64" props="text-align:left; dom-dir:ltr">AC_PATH_PROG(PERL, perl)</p>
<p style="Normal" xid="65"><c></c></p>
<p style="Normal" xid="66" props="text-align:left; dom-dir:ltr"># figure out where gdb lives</p>
<p style="Normal" xid="67" props="text-align:left; dom-dir:ltr">AC_PATH_PROG(GDB, gdb, "/no/gdb/was/found/at/configure/time")</p>
<p style="Normal" xid="68" props="text-align:left; dom-dir:ltr">AC_DEFINE_UNQUOTED(GDB_PATH, "$GDB", [path to GDB])</p>
<p style="Normal" xid="69"><c></c></p>
<p style="Normal" xid="70" props="text-align:left; dom-dir:ltr"># some older automake's don't have it so try something on our own</p>
<p style="Normal" xid="71" props="text-align:left; dom-dir:ltr">ifdef([AM_PROG_AS],[AM_PROG_AS],</p>
<p style="Normal" xid="72">[</p>
<p style="Normal" xid="73" props="text-align:left; dom-dir:ltr">AS="${CC}"</p>
<p style="Normal" xid="74" props="text-align:left; dom-dir:ltr">AC_SUBST(AS)</p>
<p style="Normal" xid="75"><c></c></p>
<p style="Normal" xid="76" props="text-align:left; dom-dir:ltr">ASFLAGS=""</p>
<p style="Normal" xid="77" props="text-align:left; dom-dir:ltr">AC_SUBST(ASFLAGS)</p>
<p style="Normal" xid="78">])</p>
<p style="Normal" xid="79"><c></c></p>
<p style="Normal" xid="80"><c></c></p>
<p style="Normal" xid="81" props="text-align:left; dom-dir:ltr"># Check if 'diff' supports -u (universal diffs) and use it if possible.</p>
<p style="Normal" xid="82"><c></c></p>
<p style="Normal" xid="83" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for diff -u])</p>
<p style="Normal" xid="84" props="text-align:left; dom-dir:ltr">AC_SUBST(DIFF)</p>
<p style="Normal" xid="85"><c></c></p>
<p style="Normal" xid="86" props="text-align:left; dom-dir:ltr"># Comparing two identical files results in 0.</p>
<p style="Normal" xid="87" props="text-align:left; dom-dir:ltr">tmpfile="tmp-xxx-yyy-zzz"</p>
<p style="Normal" xid="88" props="text-align:left; dom-dir:ltr">touch $tmpfile;</p>
<p style="Normal" xid="89" props="text-align:left; dom-dir:ltr">if diff -u $tmpfile $tmpfile ; then</p>
<p style="Normal" xid="90" props="text-align:left; dom-dir:ltr">    AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="91" props="text-align:left; dom-dir:ltr">    DIFF="diff -u"</p>
<p style="Normal" xid="92" props="text-align:left; dom-dir:ltr">else</p>
<p style="Normal" xid="93" props="text-align:left; dom-dir:ltr">    AC_MSG_RESULT([no])</p>
<p style="Normal" xid="94" props="text-align:left; dom-dir:ltr">    DIFF="diff"</p>
<p style="Normal" xid="95" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="96" props="text-align:left; dom-dir:ltr">rm $tmpfile</p>
<p style="Normal" xid="97"><c></c></p>
<p style="Normal" xid="98"><c></c></p>
<p style="Normal" xid="99" props="text-align:left; dom-dir:ltr"># We don't want gcc &lt; 3.0</p>
<p style="Normal" xid="100" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for a supported version of gcc])</p>
<p style="Normal" xid="101"><c></c></p>
<p style="Normal" xid="102" props="text-align:left; dom-dir:ltr"># Obtain the compiler version.</p>
<p style="Normal" xid="103"># </p>
<p style="Normal" xid="104" props="text-align:left; dom-dir:ltr"># A few examples of how the ${CC} --version output looks like:</p>
<p style="Normal" xid="105">#</p>
<p style="Normal" xid="106" props="text-align:left; dom-dir:ltr"># Arch Linux: i686-pc-linux-gnu-gcc (GCC) 4.6.2</p>
<p style="Normal" xid="107" props="text-align:left; dom-dir:ltr"># Debian Linux: gcc (Debian 4.3.2-1.1) 4.3.2</p>
<p style="Normal" xid="108" props="text-align:left; dom-dir:ltr"># openSUSE: gcc (SUSE Linux) 4.5.1 20101208 [gcc-4_5-branch revision 167585]</p>
<p style="Normal" xid="109" props="text-align:left; dom-dir:ltr"># Exherbo Linux: x86_64-pc-linux-gnu-gcc (Exherbo gcc-4.6.2) 4.6.2</p>
<p style="Normal" xid="110" props="text-align:left; dom-dir:ltr"># MontaVista Linux for ARM: arm-none-linux-gnueabi-gcc (Sourcery G++ Lite 2009q1-203) 4.3.3</p>
<p style="Normal" xid="111" props="text-align:left; dom-dir:ltr"># OS/X 10.6: i686-apple-darwin10-gcc-4.2.1 (GCC) 4.2.1 (Apple Inc. build 5666) (dot 3)</p>
<p style="Normal" xid="112" props="text-align:left; dom-dir:ltr"># OS/X 10.7: i686-apple-darwin11-llvm-gcc-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)</p>
<p style="Normal" xid="113" props="text-align:left; dom-dir:ltr"># Clang: clang version 2.9 (tags/RELEASE_29/final)</p>
<p style="Normal" xid="114" props="text-align:left; dom-dir:ltr"># Apple clang: Apple clang version 3.1 (tags/Apple/clang-318.0.58) (based on LLVM 3.1svn)</p>
<p style="Normal" xid="115" props="text-align:left; dom-dir:ltr"># FreeBSD clang: FreeBSD clang version 3.1 (branches/release_31 156863) 20120523</p>
<p style="Normal" xid="116">#</p>
<p style="Normal" xid="117">[</p>
<p style="Normal" xid="118" props="text-align:left; dom-dir:ltr">if test "x`${CC} --version | $SED -n -e 's/.*\(clang\) version.*/\1/p'`" = "xclang" ; then</p>
<p style="Normal" xid="119" props="text-align:left; dom-dir:ltr">    is_clang="clang"</p>
<p style="Normal" xid="120" props="text-align:left; dom-dir:ltr">    # Don't use -dumpversion with clang: it will always produce "4.2.1".</p>
<p style="Normal" xid="121" props="text-align:left; dom-dir:ltr">    gcc_version=`${CC} --version | $SED -n -e 's/.*clang version \([0-9.]*\).*$/\1/p'`</p>
<p style="Normal" xid="122" props="text-align:left; dom-dir:ltr">else</p>
<p style="Normal" xid="123" props="text-align:left; dom-dir:ltr">    is_clang="notclang"</p>
<p style="Normal" xid="124" props="text-align:left; dom-dir:ltr">    gcc_version=`${CC} -dumpversion 2&gt;/dev/null`</p>
<p style="Normal" xid="125" props="text-align:left; dom-dir:ltr">    if test "x$gcc_version" = x; then</p>
<p style="Normal" xid="126" props="text-align:left; dom-dir:ltr">	gcc_version=`${CC} --version | $SED -n -e 's/[^ ]*gcc[^ ]* ([^)]*) \([0-9.]*\).*$/\1/p'`</p>
<p style="Normal" xid="127" props="text-align:left; dom-dir:ltr">    fi</p>
<p style="Normal" xid="128" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="129">]</p>
<p style="Normal" xid="130"><c></c></p>
<p style="Normal" xid="131" props="text-align:left; dom-dir:ltr">case "${is_clang}-${gcc_version}" in</p>
<p style="Normal" xid="132" props="text-align:left; dom-dir:ltr">     notclang-3.*)</p>
<p style="Normal" xid="133" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([ok (${gcc_version})])</p>
<p style="Normal" xid="134">	;;</p>
<p style="Normal" xid="135" props="text-align:left; dom-dir:ltr">     notclang-4.*)</p>
<p style="Normal" xid="136" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([ok (${gcc_version})])</p>
<p style="Normal" xid="137">	;;</p>
<p style="Normal" xid="138" props="text-align:left; dom-dir:ltr">     clang-2.9|clang-3.*|clang-4.*)</p>
<p style="Normal" xid="139" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([ok (clang-${gcc_version})])</p>
<p style="Normal" xid="140">	;;</p>
<p style="Normal" xid="141">     *)</p>
<p style="Normal" xid="142" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([no (${gcc_version})])</p>
<p style="Normal" xid="143" props="text-align:left; dom-dir:ltr">	AC_MSG_ERROR([please use gcc &gt;= 3.0 or clang &gt;= 2.9])</p>
<p style="Normal" xid="144">	;;</p>
<p style="Normal" xid="145" props="text-align:left; dom-dir:ltr">esac</p>
<p style="Normal" xid="146"><c></c></p>
<p style="Normal" xid="147">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="148" props="text-align:left; dom-dir:ltr"># Arch/OS/platform tests.</p>
<p style="Normal" xid="149">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="150" props="text-align:left; dom-dir:ltr"># We create a number of arch/OS/platform-related variables.  We prefix them</p>
<p style="Normal" xid="151" props="text-align:left; dom-dir:ltr"># all with "VGCONF_" which indicates that they are defined at</p>
<p style="Normal" xid="152" props="text-align:left; dom-dir:ltr"># configure-time, and distinguishes them from the VGA_*/VGO_*/VGP_*</p>
<p style="Normal" xid="153" props="text-align:left; dom-dir:ltr"># variables used when compiling C files.</p>
<p style="Normal" xid="154"><c></c></p>
<p style="Normal" xid="155" props="text-align:left; dom-dir:ltr">AC_CANONICAL_HOST</p>
<p style="Normal" xid="156"><c></c></p>
<p style="Normal" xid="157" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for a supported CPU])</p>
<p style="Normal" xid="158"><c></c></p>
<p style="Normal" xid="159" props="text-align:left; dom-dir:ltr"># ARCH_MAX reflects the most that this CPU can do: for example if it</p>
<p style="Normal" xid="160" props="text-align:left; dom-dir:ltr"># is a 64-bit capable PowerPC, then it must be set to ppc64 and not ppc32.</p>
<p style="Normal" xid="161" props="text-align:left; dom-dir:ltr"># Ditto for amd64.  It is used for more configuration below, but is not used</p>
<p style="Normal" xid="162" props="text-align:left; dom-dir:ltr"># outside this file.</p>
<p style="Normal" xid="163" props="text-align:left; dom-dir:ltr">case "${host_cpu}" in</p>
<p style="Normal" xid="164" props="text-align:left; dom-dir:ltr">     i?86) </p>
<p style="Normal" xid="165" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([ok (${host_cpu})])</p>
<p style="Normal" xid="166" props="text-align:left; dom-dir:ltr">        ARCH_MAX="x86"</p>
<p style="Normal" xid="167">        ;;</p>
<p style="Normal" xid="168"><c></c></p>
<p style="Normal" xid="169" props="text-align:left; dom-dir:ltr">     x86_64) </p>
<p style="Normal" xid="170" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([ok (${host_cpu})])</p>
<p style="Normal" xid="171" props="text-align:left; dom-dir:ltr">        ARCH_MAX="amd64"</p>
<p style="Normal" xid="172">        ;;</p>
<p style="Normal" xid="173"><c></c></p>
<p style="Normal" xid="174" props="text-align:left; dom-dir:ltr">     powerpc64)</p>
<p style="Normal" xid="175" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([ok (${host_cpu})])</p>
<p style="Normal" xid="176" props="text-align:left; dom-dir:ltr">        ARCH_MAX="ppc64"</p>
<p style="Normal" xid="177">        ;;</p>
<p style="Normal" xid="178"><c></c></p>
<p style="Normal" xid="179" props="text-align:left; dom-dir:ltr">     powerpc)</p>
<p style="Normal" xid="180" props="text-align:left; dom-dir:ltr">        # On Linux this means only a 32-bit capable CPU.</p>
<p style="Normal" xid="181" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([ok (${host_cpu})])</p>
<p style="Normal" xid="182" props="text-align:left; dom-dir:ltr">        ARCH_MAX="ppc32"</p>
<p style="Normal" xid="183">        ;;</p>
<p style="Normal" xid="184"><c></c></p>
<p style="Normal" xid="185" props="text-align:left; dom-dir:ltr">     s390x)</p>
<p style="Normal" xid="186" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([ok (${host_cpu})])</p>
<p style="Normal" xid="187" props="text-align:left; dom-dir:ltr">        ARCH_MAX="s390x"</p>
<p style="Normal" xid="188">        ;;</p>
<p style="Normal" xid="189"><c></c></p>
<p style="Normal" xid="190" props="text-align:left; dom-dir:ltr">     armv7*)</p>
<p style="Normal" xid="191" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([ok (${host_cpu})])</p>
<p style="Normal" xid="192" props="text-align:left; dom-dir:ltr">	ARCH_MAX="arm"</p>
<p style="Normal" xid="193">	;;</p>
<p style="Normal" xid="194"><c></c></p>
<p style="Normal" xid="195" props="text-align:left; dom-dir:ltr">     mips)</p>
<p style="Normal" xid="196" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([ok (${host_cpu})])</p>
<p style="Normal" xid="197" props="text-align:left; dom-dir:ltr">	ARCH_MAX="mips32"</p>
<p style="Normal" xid="198">	;;</p>
<p style="Normal" xid="199"><c></c></p>
<p style="Normal" xid="200" props="text-align:left; dom-dir:ltr">     mipsel)</p>
<p style="Normal" xid="201" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([ok (${host_cpu})])</p>
<p style="Normal" xid="202" props="text-align:left; dom-dir:ltr">	ARCH_MAX="mips32"</p>
<p style="Normal" xid="203">	;;</p>
<p style="Normal" xid="204"><c></c></p>
<p style="Normal" xid="205" props="text-align:left; dom-dir:ltr">     mipsisa32r2)</p>
<p style="Normal" xid="206" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([ok (${host_cpu})])</p>
<p style="Normal" xid="207" props="text-align:left; dom-dir:ltr">	ARCH_MAX="mips32"</p>
<p style="Normal" xid="208">	;;</p>
<p style="Normal" xid="209"><c></c></p>
<p style="Normal" xid="210">     *) </p>
<p style="Normal" xid="211" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([no (${host_cpu})])</p>
<p style="Normal" xid="212" props="text-align:left; dom-dir:ltr">	AC_MSG_ERROR([Unsupported host architecture. Sorry])</p>
<p style="Normal" xid="213">	;;</p>
<p style="Normal" xid="214" props="text-align:left; dom-dir:ltr">esac</p>
<p style="Normal" xid="215"><c></c></p>
<p style="Normal" xid="216">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="217"><c></c></p>
<p style="Normal" xid="218" props="text-align:left; dom-dir:ltr"># Sometimes it's convenient to subvert the bi-arch build system and</p>
<p style="Normal" xid="219" props="text-align:left; dom-dir:ltr"># just have a single build even though the underlying platform is</p>
<p style="Normal" xid="220" props="text-align:left; dom-dir:ltr"># capable of both.  Hence handle --enable-only64bit and</p>
<p style="Normal" xid="221" props="text-align:left; dom-dir:ltr"># --enable-only32bit.  Complain if both are issued :-)</p>
<p style="Normal" xid="222" props="text-align:left; dom-dir:ltr"># [Actually, if either of these options are used, I think both get built,</p>
<p style="Normal" xid="223" props="text-align:left; dom-dir:ltr"># but only one gets installed.  So if you use an in-place build, both can be</p>
<p style="Normal" xid="224" props="text-align:left; dom-dir:ltr"># used. --njn]</p>
<p style="Normal" xid="225"><c></c></p>
<p style="Normal" xid="226" props="text-align:left; dom-dir:ltr"># Check if a 64-bit only build has been requested</p>
<p style="Normal" xid="227" props="text-align:left; dom-dir:ltr">AC_CACHE_CHECK([for a 64-bit only build], vg_cv_only64bit,</p>
<p style="Normal" xid="228" props="text-align:left; dom-dir:ltr">   [AC_ARG_ENABLE(only64bit, </p>
<p style="Normal" xid="229" props="text-align:left; dom-dir:ltr">      [  --enable-only64bit      do a 64-bit only build],</p>
<p style="Normal" xid="230" props="text-align:left; dom-dir:ltr">      [vg_cv_only64bit=$enableval],</p>
<p style="Normal" xid="231" props="text-align:left; dom-dir:ltr">      [vg_cv_only64bit=no])])</p>
<p style="Normal" xid="232"><c></c></p>
<p style="Normal" xid="233" props="text-align:left; dom-dir:ltr"># Check if a 32-bit only build has been requested</p>
<p style="Normal" xid="234" props="text-align:left; dom-dir:ltr">AC_CACHE_CHECK([for a 32-bit only build], vg_cv_only32bit,</p>
<p style="Normal" xid="235" props="text-align:left; dom-dir:ltr">   [AC_ARG_ENABLE(only32bit, </p>
<p style="Normal" xid="236" props="text-align:left; dom-dir:ltr">      [  --enable-only32bit      do a 32-bit only build],</p>
<p style="Normal" xid="237" props="text-align:left; dom-dir:ltr">      [vg_cv_only32bit=$enableval],</p>
<p style="Normal" xid="238" props="text-align:left; dom-dir:ltr">      [vg_cv_only32bit=no])])</p>
<p style="Normal" xid="239"><c></c></p>
<p style="Normal" xid="240" props="text-align:left; dom-dir:ltr"># Stay sane</p>
<p style="Normal" xid="241" props="text-align:left; dom-dir:ltr">if test x$vg_cv_only64bit = xyes -a x$vg_cv_only32bit = xyes; then</p>
<p style="Normal" xid="242" props="text-align:left; dom-dir:ltr">   AC_MSG_ERROR(</p>
<p style="Normal" xid="243" props="text-align:left; dom-dir:ltr">      [Nonsensical: both --enable-only64bit and --enable-only32bit.])</p>
<p style="Normal" xid="244" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="245"><c></c></p>
<p style="Normal" xid="246">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="247"><c></c></p>
<p style="Normal" xid="248" props="text-align:left; dom-dir:ltr"># VGCONF_OS is the primary build OS, eg. "linux".  It is passed in to</p>
<p style="Normal" xid="249" props="text-align:left; dom-dir:ltr"># compilation of many C files via -VGO_$(VGCONF_OS) and</p>
<p style="Normal" xid="250" props="text-align:left; dom-dir:ltr"># -VGP_$(VGCONF_ARCH_PRI)_$(VGCONF_OS).</p>
<p style="Normal" xid="251" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for a supported OS])</p>
<p style="Normal" xid="252" props="text-align:left; dom-dir:ltr">AC_SUBST(VGCONF_OS)</p>
<p style="Normal" xid="253"><c></c></p>
<p style="Normal" xid="254" props="text-align:left; dom-dir:ltr">DEFAULT_SUPP=""</p>
<p style="Normal" xid="255"><c></c></p>
<p style="Normal" xid="256" props="text-align:left; dom-dir:ltr">case "${host_os}" in</p>
<p style="Normal" xid="257" props="text-align:left; dom-dir:ltr">     *linux*)</p>
<p style="Normal" xid="258" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([ok (${host_os})])</p>
<p style="Normal" xid="259" props="text-align:left; dom-dir:ltr">        VGCONF_OS="linux"</p>
<p style="Normal" xid="260"><c></c></p>
<p style="Normal" xid="261" props="text-align:left; dom-dir:ltr">        # Ok, this is linux. Check the kernel version</p>
<p style="Normal" xid="262" props="text-align:left; dom-dir:ltr">        AC_MSG_CHECKING([for the kernel version])</p>
<p style="Normal" xid="263"><c></c></p>
<p style="Normal" xid="264" props="text-align:left; dom-dir:ltr">        kernel=`uname -r`</p>
<p style="Normal" xid="265"><c></c></p>
<p style="Normal" xid="266" props="text-align:left; dom-dir:ltr">        case "${kernel}" in</p>
<p style="Normal" xid="267">             2.6.*|3.*) </p>
<p style="Normal" xid="268" props="text-align:left; dom-dir:ltr">        	    AC_MSG_RESULT([2.6.x/3.x family (${kernel})])</p>
<p style="Normal" xid="269" props="text-align:left; dom-dir:ltr">        	    AC_DEFINE([KERNEL_2_6], 1, [Define to 1 if you're using Linux 2.6.x or Linux 3.x])</p>
<p style="Normal" xid="270">        	    ;;</p>
<p style="Normal" xid="271"><c></c></p>
<p style="Normal" xid="272">             2.4.*) </p>
<p style="Normal" xid="273" props="text-align:left; dom-dir:ltr">        	    AC_MSG_RESULT([2.4 family (${kernel})])</p>
<p style="Normal" xid="274" props="text-align:left; dom-dir:ltr">        	    AC_DEFINE([KERNEL_2_4], 1, [Define to 1 if you're using Linux 2.4.x])</p>
<p style="Normal" xid="275">        	    ;;</p>
<p style="Normal" xid="276"><c></c></p>
<p style="Normal" xid="277">             *) </p>
<p style="Normal" xid="278" props="text-align:left; dom-dir:ltr">        	    AC_MSG_RESULT([unsupported (${kernel})])</p>
<p style="Normal" xid="279" props="text-align:left; dom-dir:ltr">        	    AC_MSG_ERROR([Valgrind works on kernels 2.4, 2.6])</p>
<p style="Normal" xid="280">        	    ;;</p>
<p style="Normal" xid="281" props="text-align:left; dom-dir:ltr">        esac</p>
<p style="Normal" xid="282"><c></c></p>
<p style="Normal" xid="283">        ;;</p>
<p style="Normal" xid="284"><c></c></p>
<p style="Normal" xid="285" props="text-align:left; dom-dir:ltr">     *darwin*)</p>
<p style="Normal" xid="286" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([ok (${host_os})])</p>
<p style="Normal" xid="287" props="text-align:left; dom-dir:ltr">        VGCONF_OS="darwin"</p>
<p style="Normal" xid="288" props="text-align:left; dom-dir:ltr">        AC_DEFINE([DARWIN_10_5], 100500, [DARWIN_VERS value for Mac OS X 10.5])</p>
<p style="Normal" xid="289" props="text-align:left; dom-dir:ltr">        AC_DEFINE([DARWIN_10_6], 100600, [DARWIN_VERS value for Mac OS X 10.6])</p>
<p style="Normal" xid="290" props="text-align:left; dom-dir:ltr">        AC_DEFINE([DARWIN_10_7], 100700, [DARWIN_VERS value for Mac OS X 10.7])</p>
<p style="Normal" xid="291" props="text-align:left; dom-dir:ltr">        AC_DEFINE([DARWIN_10_8], 100800, [DARWIN_VERS value for Mac OS X 10.8])</p>
<p style="Normal" xid="292"><c></c></p>
<p style="Normal" xid="293" props="text-align:left; dom-dir:ltr">	AC_MSG_CHECKING([for the kernel version])</p>
<p style="Normal" xid="294" props="text-align:left; dom-dir:ltr">	kernel=`uname -r`</p>
<p style="Normal" xid="295"><c></c></p>
<p style="Normal" xid="296" props="text-align:left; dom-dir:ltr">        # Nb: for Darwin we set DEFAULT_SUPP here.  That's because Darwin</p>
<p style="Normal" xid="297" props="text-align:left; dom-dir:ltr">        # has only one relevant version, the OS version. The `uname` check</p>
<p style="Normal" xid="298" props="text-align:left; dom-dir:ltr">        # is a good way to get that version (i.e. "Darwin 9.6.0" is Mac OS</p>
<p style="Normal" xid="299" props="text-align:left; dom-dir:ltr">        # X 10.5.6, and "Darwin 10.x" is Mac OS X 10.6.x Snow Leopard,</p>
<p style="Normal" xid="300" props="text-align:left; dom-dir:ltr">        # and possibly "Darwin 11.x" is Mac OS X 10.7.x Lion), </p>
<p style="Normal" xid="301" props="text-align:left; dom-dir:ltr">        # and we don't know of an macros similar to __GLIBC__ to get that info.</p>
<p style="Normal" xid="302">        #</p>
<p style="Normal" xid="303" props="text-align:left; dom-dir:ltr">        # XXX: `uname -r` won't do the right thing for cross-compiles, but</p>
<p style="Normal" xid="304" props="text-align:left; dom-dir:ltr">        # that's not a problem yet.</p>
<p style="Normal" xid="305">        #</p>
<p style="Normal" xid="306" props="text-align:left; dom-dir:ltr">        # jseward 21 Sept 2011: I seriously doubt whether V 3.7.0 will work</p>
<p style="Normal" xid="307" props="text-align:left; dom-dir:ltr">        # on OS X 10.5.x; I haven't tested yet, and only plan to test 3.7.0</p>
<p style="Normal" xid="308" props="text-align:left; dom-dir:ltr">        # on 10.6.8 and 10.7.1.  Although tempted to delete the configure</p>
<p style="Normal" xid="309" props="text-align:left; dom-dir:ltr">        # time support for 10.5 (the 9.* pattern just below), I'll leave it</p>
<p style="Normal" xid="310" props="text-align:left; dom-dir:ltr">        # in for now, just in case anybody wants to give it a try.  But I'm</p>
<p style="Normal" xid="311" props="text-align:left; dom-dir:ltr">        # assuming that 3.7.0 is a Snow Leopard and Lion-only release.</p>
<p style="Normal" xid="312" props="text-align:left; dom-dir:ltr">	case "${kernel}" in</p>
<p style="Normal" xid="313">	     9.*)</p>
<p style="Normal" xid="314" props="text-align:left; dom-dir:ltr">		  AC_MSG_RESULT([Darwin 9.x (${kernel}) / Mac OS X 10.5 Leopard])</p>
<p style="Normal" xid="315" props="text-align:left; dom-dir:ltr">		  AC_DEFINE([DARWIN_VERS], DARWIN_10_5, [Darwin / Mac OS X version])</p>
<p style="Normal" xid="316" props="text-align:left; dom-dir:ltr">		  DEFAULT_SUPP="darwin9.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="317" props="text-align:left; dom-dir:ltr">		  DEFAULT_SUPP="darwin9-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="318">		  ;;</p>
<p style="Normal" xid="319">	     10.*)</p>
<p style="Normal" xid="320" props="text-align:left; dom-dir:ltr">		  AC_MSG_RESULT([Darwin 10.x (${kernel}) / Mac OS X 10.6 Snow Leopard])</p>
<p style="Normal" xid="321" props="text-align:left; dom-dir:ltr">		  AC_DEFINE([DARWIN_VERS], DARWIN_10_6, [Darwin / Mac OS X version])</p>
<p style="Normal" xid="322" props="text-align:left; dom-dir:ltr">		  DEFAULT_SUPP="darwin10.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="323" props="text-align:left; dom-dir:ltr">		  DEFAULT_SUPP="darwin10-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="324">		  ;;</p>
<p style="Normal" xid="325">	     11.*)</p>
<p style="Normal" xid="326" props="text-align:left; dom-dir:ltr">		  AC_MSG_RESULT([Darwin 11.x (${kernel}) / Mac OS X 10.7 Lion])</p>
<p style="Normal" xid="327" props="text-align:left; dom-dir:ltr">		  AC_DEFINE([DARWIN_VERS], DARWIN_10_7, [Darwin / Mac OS X version])</p>
<p style="Normal" xid="328" props="text-align:left; dom-dir:ltr">		  DEFAULT_SUPP="darwin11.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="329" props="text-align:left; dom-dir:ltr">		  DEFAULT_SUPP="darwin10-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="330">		  ;;</p>
<p style="Normal" xid="331">	     12.*)</p>
<p style="Normal" xid="332" props="text-align:left; dom-dir:ltr">		  AC_MSG_RESULT([Darwin 12.x (${kernel}) / Mac OS X 10.8 Mountain Lion])</p>
<p style="Normal" xid="333" props="text-align:left; dom-dir:ltr">		  AC_DEFINE([DARWIN_VERS], DARWIN_10_8, [Darwin / Mac OS X version])</p>
<p style="Normal" xid="334" props="text-align:left; dom-dir:ltr">		  DEFAULT_SUPP="darwin12.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="335" props="text-align:left; dom-dir:ltr">		  DEFAULT_SUPP="darwin10-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="336">		  ;;</p>
<p style="Normal" xid="337">             *) </p>
<p style="Normal" xid="338" props="text-align:left; dom-dir:ltr">		  AC_MSG_RESULT([unsupported (${kernel})])</p>
<p style="Normal" xid="339" props="text-align:left; dom-dir:ltr">		  AC_MSG_ERROR([Valgrind works on Darwin 10.x and 11.x (Mac OS X 10.6/7)])</p>
<p style="Normal" xid="340">		  ;;</p>
<p style="Normal" xid="341" props="text-align:left; dom-dir:ltr">	esac</p>
<p style="Normal" xid="342">        ;;</p>
<p style="Normal" xid="343"><c></c></p>
<p style="Normal" xid="344">     *) </p>
<p style="Normal" xid="345" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([no (${host_os})])</p>
<p style="Normal" xid="346" props="text-align:left; dom-dir:ltr">	AC_MSG_ERROR([Valgrind is operating system specific. Sorry.])</p>
<p style="Normal" xid="347">	;;</p>
<p style="Normal" xid="348" props="text-align:left; dom-dir:ltr">esac</p>
<p style="Normal" xid="349"><c></c></p>
<p style="Normal" xid="350">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="351"><c></c></p>
<p style="Normal" xid="352" props="text-align:left; dom-dir:ltr"># If we are building on a 64 bit platform test to see if the system</p>
<p style="Normal" xid="353" props="text-align:left; dom-dir:ltr"># supports building 32 bit programs and disable 32 bit support if it</p>
<p style="Normal" xid="354" props="text-align:left; dom-dir:ltr"># does not support building 32 bit programs</p>
<p style="Normal" xid="355"><c></c></p>
<p style="Normal" xid="356" props="text-align:left; dom-dir:ltr">case "$ARCH_MAX-$VGCONF_OS" in</p>
<p style="Normal" xid="357" props="text-align:left; dom-dir:ltr">     amd64-linux|ppc64-linux)</p>
<p style="Normal" xid="358" props="text-align:left; dom-dir:ltr">        AC_MSG_CHECKING([for 32 bit build support])</p>
<p style="Normal" xid="359" props="text-align:left; dom-dir:ltr">        safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="360" props="text-align:left; dom-dir:ltr">        CFLAGS="-m32"</p>
<p style="Normal" xid="361" props="text-align:left; dom-dir:ltr">        AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="362" props="text-align:left; dom-dir:ltr">          return 0;</p>
<p style="Normal" xid="363">        ]])], [</p>
<p style="Normal" xid="364" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="365">        ], [</p>
<p style="Normal" xid="366" props="text-align:left; dom-dir:ltr">        vg_cv_only64bit="yes"</p>
<p style="Normal" xid="367" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([no])</p>
<p style="Normal" xid="368">        ])</p>
<p style="Normal" xid="369" props="text-align:left; dom-dir:ltr">        CFLAGS=$safe_CFLAGS;;</p>
<p style="Normal" xid="370" props="text-align:left; dom-dir:ltr">esac</p>
<p style="Normal" xid="371"><c></c></p>
<p style="Normal" xid="372" props="text-align:left; dom-dir:ltr">if test x$vg_cv_only64bit = xyes -a x$vg_cv_only32bit = xyes; then</p>
<p style="Normal" xid="373" props="text-align:left; dom-dir:ltr">   AC_MSG_ERROR(</p>
<p style="Normal" xid="374" props="text-align:left; dom-dir:ltr">      [--enable-only32bit was specified but system does not support 32 bit builds])</p>
<p style="Normal" xid="375" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="376"><c></c></p>
<p style="Normal" xid="377">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="378"><c></c></p>
<p style="Normal" xid="379" props="text-align:left; dom-dir:ltr"># VGCONF_ARCH_PRI is the arch for the primary build target, eg. "amd64".  By</p>
<p style="Normal" xid="380" props="text-align:left; dom-dir:ltr"># default it's the same as ARCH_MAX.  But if, say, we do a build on an amd64</p>
<p style="Normal" xid="381" props="text-align:left; dom-dir:ltr"># machine, but --enable-only32bit has been requested, then ARCH_MAX (see</p>
<p style="Normal" xid="382" props="text-align:left; dom-dir:ltr"># above) will be "amd64" since that reflects the most that this cpu can do,</p>
<p style="Normal" xid="383" props="text-align:left; dom-dir:ltr"># but VGCONF_ARCH_PRI will be downgraded to "x86", since that reflects the</p>
<p style="Normal" xid="384" props="text-align:left; dom-dir:ltr"># arch corresponding to the primary build (VGCONF_PLATFORM_PRI_CAPS).  It is</p>
<p style="Normal" xid="385" props="text-align:left; dom-dir:ltr"># passed in to compilation of many C files via -VGA_$(VGCONF_ARCH_PRI) and</p>
<p style="Normal" xid="386" props="text-align:left; dom-dir:ltr"># -VGP_$(VGCONF_ARCH_PRI)_$(VGCONF_OS).</p>
<p style="Normal" xid="387" props="text-align:left; dom-dir:ltr">AC_SUBST(VGCONF_ARCH_PRI)</p>
<p style="Normal" xid="388"><c></c></p>
<p style="Normal" xid="389" props="text-align:left; dom-dir:ltr"># VGCONF_ARCH_SEC is the arch for the secondary build target, eg. "x86".</p>
<p style="Normal" xid="390" props="text-align:left; dom-dir:ltr"># It is passed in to compilation of many C files via -VGA_$(VGCONF_ARCH_SEC)</p>
<p style="Normal" xid="391" props="text-align:left; dom-dir:ltr"># and -VGP_$(VGCONF_ARCH_SEC)_$(VGCONF_OS), if there is a secondary target.</p>
<p style="Normal" xid="392" props="text-align:left; dom-dir:ltr"># It is empty if there is no secondary target.</p>
<p style="Normal" xid="393" props="text-align:left; dom-dir:ltr">AC_SUBST(VGCONF_ARCH_SEC)</p>
<p style="Normal" xid="394"><c></c></p>
<p style="Normal" xid="395" props="text-align:left; dom-dir:ltr"># VGCONF_PLATFORM_PRI_CAPS is the primary build target, eg. "AMD64_LINUX".</p>
<p style="Normal" xid="396" props="text-align:left; dom-dir:ltr"># The entire system, including regression and performance tests, will be</p>
<p style="Normal" xid="397" props="text-align:left; dom-dir:ltr"># built for this target.  The "_CAPS" indicates that the name is in capital</p>
<p style="Normal" xid="398" props="text-align:left; dom-dir:ltr"># letters, and it also uses '_' rather than '-' as a separator, because it's</p>
<p style="Normal" xid="399" props="text-align:left; dom-dir:ltr"># used to create various Makefile variables, which are all in caps by</p>
<p style="Normal" xid="400" props="text-align:left; dom-dir:ltr"># convention and cannot contain '-' characters.  This is in contrast to</p>
<p style="Normal" xid="401" props="text-align:left; dom-dir:ltr"># VGCONF_ARCH_PRI and VGCONF_OS which are not in caps.</p>
<p style="Normal" xid="402" props="text-align:left; dom-dir:ltr">AC_SUBST(VGCONF_PLATFORM_PRI_CAPS)</p>
<p style="Normal" xid="403"><c></c></p>
<p style="Normal" xid="404" props="text-align:left; dom-dir:ltr"># VGCONF_PLATFORM_SEC_CAPS is the secondary build target, if there is one.</p>
<p style="Normal" xid="405" props="text-align:left; dom-dir:ltr"># Valgrind and tools will also be built for this target, but not the</p>
<p style="Normal" xid="406" props="text-align:left; dom-dir:ltr"># regression or performance tests.</p>
<p style="Normal" xid="407">#</p>
<p style="Normal" xid="408" props="text-align:left; dom-dir:ltr"># By default, the primary arch is the same as the "max" arch, as commented</p>
<p style="Normal" xid="409" props="text-align:left; dom-dir:ltr"># above (at the definition of ARCH_MAX).  We may choose to downgrade it in</p>
<p style="Normal" xid="410" props="text-align:left; dom-dir:ltr"># the big case statement just below here, in the case where we're building</p>
<p style="Normal" xid="411" props="text-align:left; dom-dir:ltr"># on a 64 bit machine but have been requested only to do a 32 bit build.</p>
<p style="Normal" xid="412" props="text-align:left; dom-dir:ltr">AC_SUBST(VGCONF_PLATFORM_SEC_CAPS)</p>
<p style="Normal" xid="413"><c></c></p>
<p style="Normal" xid="414" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for a supported CPU/OS combination])</p>
<p style="Normal" xid="415"><c></c></p>
<p style="Normal" xid="416" props="text-align:left; dom-dir:ltr"># NB.  The load address for a given platform may be specified in more </p>
<p style="Normal" xid="417" props="text-align:left; dom-dir:ltr"># than one place, in some cases, depending on whether we're doing a biarch,</p>
<p style="Normal" xid="418" props="text-align:left; dom-dir:ltr"># 32-bit only or 64-bit only build.  eg see case for amd64-linux below.</p>
<p style="Normal" xid="419" props="text-align:left; dom-dir:ltr"># Be careful to give consistent values in all subcases.  Also, all four</p>
<p style="Normal" xid="420" props="text-align:left; dom-dir:ltr"># valt_load_addres_{pri,sec}_{norml,inner} values must always be set,</p>
<p style="Normal" xid="421" props="text-align:left; dom-dir:ltr"># even if it is to "0xUNSET".</p>
<p style="Normal" xid="422">#</p>
<p style="Normal" xid="423" props="text-align:left; dom-dir:ltr">case "$ARCH_MAX-$VGCONF_OS" in</p>
<p style="Normal" xid="424" props="text-align:left; dom-dir:ltr">     x86-linux)</p>
<p style="Normal" xid="425" props="text-align:left; dom-dir:ltr">        VGCONF_ARCH_PRI="x86"</p>
<p style="Normal" xid="426" props="text-align:left; dom-dir:ltr">        VGCONF_ARCH_SEC=""</p>
<p style="Normal" xid="427" props="text-align:left; dom-dir:ltr">	VGCONF_PLATFORM_PRI_CAPS="X86_LINUX"</p>
<p style="Normal" xid="428" props="text-align:left; dom-dir:ltr">	VGCONF_PLATFORM_SEC_CAPS=""</p>
<p style="Normal" xid="429" props="text-align:left; dom-dir:ltr">        valt_load_address_pri_norml="0x38000000"</p>
<p style="Normal" xid="430" props="text-align:left; dom-dir:ltr">        valt_load_address_pri_inner="0x28000000"</p>
<p style="Normal" xid="431" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_norml="0xUNSET"</p>
<p style="Normal" xid="432" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_inner="0xUNSET"</p>
<p style="Normal" xid="433" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([ok (${ARCH_MAX}-${VGCONF_OS})])</p>
<p style="Normal" xid="434">	;;</p>
<p style="Normal" xid="435" props="text-align:left; dom-dir:ltr">     amd64-linux)</p>
<p style="Normal" xid="436" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_norml="0xUNSET"</p>
<p style="Normal" xid="437" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_inner="0xUNSET"</p>
<p style="Normal" xid="438" props="text-align:left; dom-dir:ltr">	if test x$vg_cv_only64bit = xyes; then</p>
<p style="Normal" xid="439" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_PRI="amd64"</p>
<p style="Normal" xid="440" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_SEC=""</p>
<p style="Normal" xid="441" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_PRI_CAPS="AMD64_LINUX"</p>
<p style="Normal" xid="442" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_SEC_CAPS=""</p>
<p style="Normal" xid="443" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_norml="0x38000000"</p>
<p style="Normal" xid="444" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_inner="0x28000000"</p>
<p style="Normal" xid="445" props="text-align:left; dom-dir:ltr">	elif test x$vg_cv_only32bit = xyes; then</p>
<p style="Normal" xid="446" props="text-align:left; dom-dir:ltr">	   VGCONF_ARCH_PRI="x86"</p>
<p style="Normal" xid="447" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_SEC=""</p>
<p style="Normal" xid="448" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_PRI_CAPS="X86_LINUX"</p>
<p style="Normal" xid="449" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_SEC_CAPS=""</p>
<p style="Normal" xid="450" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_norml="0x38000000"</p>
<p style="Normal" xid="451" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_inner="0x28000000"</p>
<p style="Normal" xid="452" props="text-align:left; dom-dir:ltr">	else</p>
<p style="Normal" xid="453" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_PRI="amd64"</p>
<p style="Normal" xid="454" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_SEC="x86"</p>
<p style="Normal" xid="455" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_PRI_CAPS="AMD64_LINUX"</p>
<p style="Normal" xid="456" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_SEC_CAPS="X86_LINUX"</p>
<p style="Normal" xid="457" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_norml="0x38000000"</p>
<p style="Normal" xid="458" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_inner="0x28000000"</p>
<p style="Normal" xid="459" props="text-align:left; dom-dir:ltr">           valt_load_address_sec_norml="0x38000000"</p>
<p style="Normal" xid="460" props="text-align:left; dom-dir:ltr">           valt_load_address_sec_inner="0x28000000"</p>
<p style="Normal" xid="461" props="text-align:left; dom-dir:ltr">	fi</p>
<p style="Normal" xid="462" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([ok (${ARCH_MAX}-${VGCONF_OS})])</p>
<p style="Normal" xid="463">	;;</p>
<p style="Normal" xid="464" props="text-align:left; dom-dir:ltr">     ppc32-linux)</p>
<p style="Normal" xid="465" props="text-align:left; dom-dir:ltr">        VGCONF_ARCH_PRI="ppc32"</p>
<p style="Normal" xid="466" props="text-align:left; dom-dir:ltr">        VGCONF_ARCH_SEC=""</p>
<p style="Normal" xid="467" props="text-align:left; dom-dir:ltr">	VGCONF_PLATFORM_PRI_CAPS="PPC32_LINUX"</p>
<p style="Normal" xid="468" props="text-align:left; dom-dir:ltr">	VGCONF_PLATFORM_SEC_CAPS=""</p>
<p style="Normal" xid="469" props="text-align:left; dom-dir:ltr">        valt_load_address_pri_norml="0x38000000"</p>
<p style="Normal" xid="470" props="text-align:left; dom-dir:ltr">        valt_load_address_pri_inner="0x28000000"</p>
<p style="Normal" xid="471" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_norml="0xUNSET"</p>
<p style="Normal" xid="472" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_inner="0xUNSET"</p>
<p style="Normal" xid="473" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([ok (${ARCH_MAX}-${VGCONF_OS})])</p>
<p style="Normal" xid="474">	;;</p>
<p style="Normal" xid="475" props="text-align:left; dom-dir:ltr">     ppc64-linux)</p>
<p style="Normal" xid="476" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_norml="0xUNSET"</p>
<p style="Normal" xid="477" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_inner="0xUNSET"</p>
<p style="Normal" xid="478" props="text-align:left; dom-dir:ltr">	if test x$vg_cv_only64bit = xyes; then</p>
<p style="Normal" xid="479" props="text-align:left; dom-dir:ltr">	   VGCONF_ARCH_PRI="ppc64"</p>
<p style="Normal" xid="480" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_SEC=""</p>
<p style="Normal" xid="481" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_PRI_CAPS="PPC64_LINUX"</p>
<p style="Normal" xid="482" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_SEC_CAPS=""</p>
<p style="Normal" xid="483" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_norml="0x38000000"</p>
<p style="Normal" xid="484" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_inner="0x28000000"</p>
<p style="Normal" xid="485" props="text-align:left; dom-dir:ltr">	elif test x$vg_cv_only32bit = xyes; then</p>
<p style="Normal" xid="486" props="text-align:left; dom-dir:ltr">	   VGCONF_ARCH_PRI="ppc32"</p>
<p style="Normal" xid="487" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_SEC=""</p>
<p style="Normal" xid="488" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_PRI_CAPS="PPC32_LINUX"</p>
<p style="Normal" xid="489" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_SEC_CAPS=""</p>
<p style="Normal" xid="490" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_norml="0x38000000"</p>
<p style="Normal" xid="491" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_inner="0x28000000"</p>
<p style="Normal" xid="492" props="text-align:left; dom-dir:ltr">	else</p>
<p style="Normal" xid="493" props="text-align:left; dom-dir:ltr">	   VGCONF_ARCH_PRI="ppc64"</p>
<p style="Normal" xid="494" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_SEC="ppc32"</p>
<p style="Normal" xid="495" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_PRI_CAPS="PPC64_LINUX"</p>
<p style="Normal" xid="496" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_SEC_CAPS="PPC32_LINUX"</p>
<p style="Normal" xid="497" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_norml="0x38000000"</p>
<p style="Normal" xid="498" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_inner="0x28000000"</p>
<p style="Normal" xid="499" props="text-align:left; dom-dir:ltr">           valt_load_address_sec_norml="0x38000000"</p>
<p style="Normal" xid="500" props="text-align:left; dom-dir:ltr">           valt_load_address_sec_inner="0x28000000"</p>
<p style="Normal" xid="501" props="text-align:left; dom-dir:ltr">	fi</p>
<p style="Normal" xid="502" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([ok (${ARCH_MAX}-${VGCONF_OS})])</p>
<p style="Normal" xid="503">	;;</p>
<p style="Normal" xid="504" props="text-align:left; dom-dir:ltr">     # Darwin gets identified as 32-bit even when it supports 64-bit.</p>
<p style="Normal" xid="505" props="text-align:left; dom-dir:ltr">     # (Not sure why, possibly because 'uname' returns "i386"?)  Just about</p>
<p style="Normal" xid="506" props="text-align:left; dom-dir:ltr">     # all Macs support both 32-bit and 64-bit, so we just build both.  If</p>
<p style="Normal" xid="507" props="text-align:left; dom-dir:ltr">     # someone has a really old 32-bit only machine they can (hopefully?)</p>
<p style="Normal" xid="508" props="text-align:left; dom-dir:ltr">     # build with --enable-only32bit.  See bug 243362.</p>
<p style="Normal" xid="509" props="text-align:left; dom-dir:ltr">     x86-darwin|amd64-darwin)</p>
<p style="Normal" xid="510" props="text-align:left; dom-dir:ltr">        ARCH_MAX="amd64"</p>
<p style="Normal" xid="511" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_norml="0xUNSET"</p>
<p style="Normal" xid="512" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_inner="0xUNSET"</p>
<p style="Normal" xid="513" props="text-align:left; dom-dir:ltr">	if test x$vg_cv_only64bit = xyes; then</p>
<p style="Normal" xid="514" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_PRI="amd64"</p>
<p style="Normal" xid="515" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_SEC=""</p>
<p style="Normal" xid="516" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_PRI_CAPS="AMD64_DARWIN"</p>
<p style="Normal" xid="517" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_SEC_CAPS=""</p>
<p style="Normal" xid="518" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_norml="0x138000000"</p>
<p style="Normal" xid="519" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_inner="0x128000000"</p>
<p style="Normal" xid="520" props="text-align:left; dom-dir:ltr">	elif test x$vg_cv_only32bit = xyes; then</p>
<p style="Normal" xid="521" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_PRI="x86"</p>
<p style="Normal" xid="522" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_SEC=""</p>
<p style="Normal" xid="523" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_PRI_CAPS="X86_DARWIN"</p>
<p style="Normal" xid="524" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_SEC_CAPS=""</p>
<p style="Normal" xid="525" props="text-align:left; dom-dir:ltr">	   VGCONF_ARCH_PRI_CAPS="x86"</p>
<p style="Normal" xid="526" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_norml="0x38000000"</p>
<p style="Normal" xid="527" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_inner="0x28000000"</p>
<p style="Normal" xid="528" props="text-align:left; dom-dir:ltr">	else</p>
<p style="Normal" xid="529" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_PRI="amd64"</p>
<p style="Normal" xid="530" props="text-align:left; dom-dir:ltr">           VGCONF_ARCH_SEC="x86"</p>
<p style="Normal" xid="531" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_PRI_CAPS="AMD64_DARWIN"</p>
<p style="Normal" xid="532" props="text-align:left; dom-dir:ltr">	   VGCONF_PLATFORM_SEC_CAPS="X86_DARWIN"</p>
<p style="Normal" xid="533" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_norml="0x138000000"</p>
<p style="Normal" xid="534" props="text-align:left; dom-dir:ltr">           valt_load_address_pri_inner="0x128000000"</p>
<p style="Normal" xid="535" props="text-align:left; dom-dir:ltr">           valt_load_address_sec_norml="0x38000000"</p>
<p style="Normal" xid="536" props="text-align:left; dom-dir:ltr">           valt_load_address_sec_inner="0x28000000"</p>
<p style="Normal" xid="537" props="text-align:left; dom-dir:ltr">	fi</p>
<p style="Normal" xid="538" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([ok (${ARCH_MAX}-${VGCONF_OS})])</p>
<p style="Normal" xid="539">	;;</p>
<p style="Normal" xid="540" props="text-align:left; dom-dir:ltr">     arm-linux) </p>
<p style="Normal" xid="541" props="text-align:left; dom-dir:ltr">	VGCONF_ARCH_PRI="arm"</p>
<p style="Normal" xid="542" props="text-align:left; dom-dir:ltr">	VGCONF_PLATFORM_PRI_CAPS="ARM_LINUX"</p>
<p style="Normal" xid="543" props="text-align:left; dom-dir:ltr">	VGCONF_PLATFORM_SEC_CAPS=""</p>
<p style="Normal" xid="544" props="text-align:left; dom-dir:ltr">	valt_load_address_pri_norml="0x38000000"</p>
<p style="Normal" xid="545" props="text-align:left; dom-dir:ltr">	valt_load_address_pri_inner="0x28000000"</p>
<p style="Normal" xid="546" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_norml="0xUNSET"</p>
<p style="Normal" xid="547" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_inner="0xUNSET"</p>
<p style="Normal" xid="548" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([ok (${host_cpu}-${host_os})])</p>
<p style="Normal" xid="549">	;;</p>
<p style="Normal" xid="550" props="text-align:left; dom-dir:ltr">     s390x-linux)</p>
<p style="Normal" xid="551" props="text-align:left; dom-dir:ltr">        VGCONF_ARCH_PRI="s390x"</p>
<p style="Normal" xid="552" props="text-align:left; dom-dir:ltr">        VGCONF_ARCH_SEC=""</p>
<p style="Normal" xid="553" props="text-align:left; dom-dir:ltr">        VGCONF_PLATFORM_PRI_CAPS="S390X_LINUX"</p>
<p style="Normal" xid="554" props="text-align:left; dom-dir:ltr">        VGCONF_PLATFORM_SEC_CAPS=""</p>
<p style="Normal" xid="555" props="text-align:left; dom-dir:ltr">        # we want to have the generated code close to the dispatcher</p>
<p style="Normal" xid="556" props="text-align:left; dom-dir:ltr">        valt_load_address_pri_norml="0x401000000"</p>
<p style="Normal" xid="557" props="text-align:left; dom-dir:ltr">        valt_load_address_pri_inner="0x410000000"</p>
<p style="Normal" xid="558" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_norml="0xUNSET"</p>
<p style="Normal" xid="559" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_inner="0xUNSET"</p>
<p style="Normal" xid="560" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([ok (${ARCH_MAX}-${VGCONF_OS})])</p>
<p style="Normal" xid="561">        ;;</p>
<p style="Normal" xid="562" props="text-align:left; dom-dir:ltr">     mips32-linux) </p>
<p style="Normal" xid="563" props="text-align:left; dom-dir:ltr">        VGCONF_ARCH_PRI="mips32"</p>
<p style="Normal" xid="564" props="text-align:left; dom-dir:ltr">        VGCONF_PLATFORM_PRI_CAPS="MIPS32_LINUX"</p>
<p style="Normal" xid="565" props="text-align:left; dom-dir:ltr">        VGCONF_PLATFORM_SEC_CAPS=""</p>
<p style="Normal" xid="566" props="text-align:left; dom-dir:ltr">        valt_load_address_pri_norml="0x38000000"</p>
<p style="Normal" xid="567" props="text-align:left; dom-dir:ltr">        valt_load_address_pri_inner="0x28000000"</p>
<p style="Normal" xid="568" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_norml="0xUNSET"</p>
<p style="Normal" xid="569" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_inner="0xUNSET"</p>
<p style="Normal" xid="570" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([ok (${ARCH_MAX}-${VGCONF_OS})])</p>
<p style="Normal" xid="571" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([ok (${host_cpu}-${host_os})])</p>
<p style="Normal" xid="572">        ;;</p>
<p style="Normal" xid="573">    *)</p>
<p style="Normal" xid="574" props="text-align:left; dom-dir:ltr">        VGCONF_ARCH_PRI="unknown"</p>
<p style="Normal" xid="575" props="text-align:left; dom-dir:ltr">        VGCONF_ARCH_SEC="unknown"</p>
<p style="Normal" xid="576" props="text-align:left; dom-dir:ltr">	VGCONF_PLATFORM_PRI_CAPS="UNKNOWN"</p>
<p style="Normal" xid="577" props="text-align:left; dom-dir:ltr">	VGCONF_PLATFORM_SEC_CAPS="UNKNOWN"</p>
<p style="Normal" xid="578" props="text-align:left; dom-dir:ltr">        valt_load_address_pri_norml="0xUNSET"</p>
<p style="Normal" xid="579" props="text-align:left; dom-dir:ltr">        valt_load_address_pri_inner="0xUNSET"</p>
<p style="Normal" xid="580" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_norml="0xUNSET"</p>
<p style="Normal" xid="581" props="text-align:left; dom-dir:ltr">        valt_load_address_sec_inner="0xUNSET"</p>
<p style="Normal" xid="582" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([no (${ARCH_MAX}-${VGCONF_OS})])</p>
<p style="Normal" xid="583" props="text-align:left; dom-dir:ltr">        AC_MSG_ERROR([Valgrind is platform specific. Sorry. Please consider doing a port.])</p>
<p style="Normal" xid="584">        ;;</p>
<p style="Normal" xid="585" props="text-align:left; dom-dir:ltr">esac</p>
<p style="Normal" xid="586"><c></c></p>
<p style="Normal" xid="587">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="588"><c></c></p>
<p style="Normal" xid="589" props="text-align:left; dom-dir:ltr"># Set up VGCONF_ARCHS_INCLUDE_&lt;arch&gt;.  Either one or two of these become</p>
<p style="Normal" xid="590" props="text-align:left; dom-dir:ltr"># defined.</p>
<p style="Normal" xid="591" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_ARCHS_INCLUDE_X86,   </p>
<p style="Normal" xid="592" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xX86_LINUX \</p>
<p style="Normal" xid="593" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_SEC_CAPS = xX86_LINUX \</p>
<p style="Normal" xid="594" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_PRI_CAPS = xX86_DARWIN \</p>
<p style="Normal" xid="595" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_SEC_CAPS = xX86_DARWIN )</p>
<p style="Normal" xid="596" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_ARCHS_INCLUDE_AMD64, </p>
<p style="Normal" xid="597" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xAMD64_LINUX \</p>
<p style="Normal" xid="598" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_PRI_CAPS = xAMD64_DARWIN )</p>
<p style="Normal" xid="599" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_ARCHS_INCLUDE_PPC32, </p>
<p style="Normal" xid="600" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xPPC32_LINUX \ </p>
<p style="Normal" xid="601" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_SEC_CAPS = xPPC32_LINUX )</p>
<p style="Normal" xid="602" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_ARCHS_INCLUDE_PPC64, </p>
<p style="Normal" xid="603" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xPPC64_LINUX )</p>
<p style="Normal" xid="604" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_ARCHS_INCLUDE_ARM,   </p>
<p style="Normal" xid="605" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xARM_LINUX )</p>
<p style="Normal" xid="606" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_ARCHS_INCLUDE_S390X,</p>
<p style="Normal" xid="607" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xS390X_LINUX )</p>
<p style="Normal" xid="608" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_ARCHS_INCLUDE_MIPS32,</p>
<p style="Normal" xid="609" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xMIPS32_LINUX )</p>
<p style="Normal" xid="610"><c></c></p>
<p style="Normal" xid="611" props="text-align:left; dom-dir:ltr"># Set up VGCONF_PLATFORMS_INCLUDE_&lt;platform&gt;.  Either one or two of these</p>
<p style="Normal" xid="612" props="text-align:left; dom-dir:ltr"># become defined.</p>
<p style="Normal" xid="613" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_PLATFORMS_INCLUDE_X86_LINUX,   </p>
<p style="Normal" xid="614" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xX86_LINUX \</p>
<p style="Normal" xid="615" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_SEC_CAPS = xX86_LINUX)</p>
<p style="Normal" xid="616" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_PLATFORMS_INCLUDE_AMD64_LINUX, </p>
<p style="Normal" xid="617" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xAMD64_LINUX)</p>
<p style="Normal" xid="618" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_PLATFORMS_INCLUDE_PPC32_LINUX, </p>
<p style="Normal" xid="619" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xPPC32_LINUX \ </p>
<p style="Normal" xid="620" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_SEC_CAPS = xPPC32_LINUX)</p>
<p style="Normal" xid="621" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_PLATFORMS_INCLUDE_PPC64_LINUX, </p>
<p style="Normal" xid="622" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xPPC64_LINUX)</p>
<p style="Normal" xid="623" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_PLATFORMS_INCLUDE_ARM_LINUX, </p>
<p style="Normal" xid="624" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xARM_LINUX)</p>
<p style="Normal" xid="625" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_PLATFORMS_INCLUDE_S390X_LINUX,</p>
<p style="Normal" xid="626" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xS390X_LINUX \</p>
<p style="Normal" xid="627" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_SEC_CAPS = xS390X_LINUX)</p>
<p style="Normal" xid="628" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_PLATFORMS_INCLUDE_MIPS32_LINUX,</p>
<p style="Normal" xid="629" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xMIPS32_LINUX)</p>
<p style="Normal" xid="630"><c></c></p>
<p style="Normal" xid="631" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_PLATFORMS_INCLUDE_X86_DARWIN,   </p>
<p style="Normal" xid="632" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xX86_DARWIN \</p>
<p style="Normal" xid="633" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_SEC_CAPS = xX86_DARWIN)</p>
<p style="Normal" xid="634" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_PLATFORMS_INCLUDE_AMD64_DARWIN, </p>
<p style="Normal" xid="635" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xAMD64_DARWIN)</p>
<p style="Normal" xid="636"><c></c></p>
<p style="Normal" xid="637"><c></c></p>
<p style="Normal" xid="638" props="text-align:left; dom-dir:ltr"># Similarly, set up VGCONF_OS_IS_&lt;os&gt;.  Exactly one of these becomes defined.</p>
<p style="Normal" xid="639" props="text-align:left; dom-dir:ltr"># Relies on the assumption that the primary and secondary targets are </p>
<p style="Normal" xid="640" props="text-align:left; dom-dir:ltr"># for the same OS, so therefore only necessary to test the primary.</p>
<p style="Normal" xid="641" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_OS_IS_LINUX,</p>
<p style="Normal" xid="642" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xX86_LINUX \</p>
<p style="Normal" xid="643" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_PRI_CAPS = xAMD64_LINUX \</p>
<p style="Normal" xid="644" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_PRI_CAPS = xPPC32_LINUX \</p>
<p style="Normal" xid="645" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_PRI_CAPS = xPPC64_LINUX \</p>
<p style="Normal" xid="646" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_PRI_CAPS = xARM_LINUX \</p>
<p style="Normal" xid="647" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_PRI_CAPS = xS390X_LINUX \</p>
<p style="Normal" xid="648" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_PRI_CAPS = xMIPS32_LINUX)</p>
<p style="Normal" xid="649" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_OS_IS_DARWIN,</p>
<p style="Normal" xid="650" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_PRI_CAPS = xX86_DARWIN \</p>
<p style="Normal" xid="651" props="text-align:left; dom-dir:ltr">                 -o x$VGCONF_PLATFORM_PRI_CAPS = xAMD64_DARWIN)</p>
<p style="Normal" xid="652"><c></c></p>
<p style="Normal" xid="653"><c></c></p>
<p style="Normal" xid="654" props="text-align:left; dom-dir:ltr"># Sometimes, in the Makefile.am files, it's useful to know whether or not</p>
<p style="Normal" xid="655" props="text-align:left; dom-dir:ltr"># there is a secondary target.</p>
<p style="Normal" xid="656" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_HAVE_PLATFORM_SEC,</p>
<p style="Normal" xid="657" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATFORM_SEC_CAPS != x)</p>
<p style="Normal" xid="658"><c></c></p>
<p style="Normal" xid="659" props="text-align:left; dom-dir:ltr">dnl automake-1.10 does not have AM_COND_IF (added in 1.11), so we supply a</p>
<p style="Normal" xid="660" props="text-align:left; dom-dir:ltr">dnl fallback definition</p>
<p style="Normal" xid="661" props="text-align:left; dom-dir:ltr">dnl The macro is courtesy of Dave Hart:</p>
<p style="Normal" xid="662" props="text-align:left; dom-dir:ltr">dnl   https://lists.gnu.org/archive/html/automake/2010-12/msg00045.html</p>
<p style="Normal" xid="663" props="text-align:left; dom-dir:ltr">m4_ifndef([AM_COND_IF], [AC_DEFUN([AM_COND_IF], [</p>
<p style="Normal" xid="664" props="text-align:left; dom-dir:ltr">if test -z "$$1_TRUE"; then :</p>
<p style="Normal" xid="665" props="text-align:left; dom-dir:ltr">  m4_n([$2])[]dnl</p>
<p style="Normal" xid="666" props="text-align:left; dom-dir:ltr">m4_ifval([$3],</p>
<p style="Normal" xid="667" props="text-align:left; dom-dir:ltr">[else</p>
<p style="Normal" xid="668">  $3</p>
<p style="Normal" xid="669" props="text-align:left; dom-dir:ltr">])dnl</p>
<p style="Normal" xid="670" props="text-align:left; dom-dir:ltr">fi[]dnl</p>
<p style="Normal" xid="671">])])</p>
<p style="Normal" xid="672"><c></c></p>
<p style="Normal" xid="673">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="674" props="text-align:left; dom-dir:ltr"># Inner Valgrind?</p>
<p style="Normal" xid="675">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="676"><c></c></p>
<p style="Normal" xid="677" props="text-align:left; dom-dir:ltr"># Check if this should be built as an inner Valgrind, to be run within</p>
<p style="Normal" xid="678" props="text-align:left; dom-dir:ltr"># another Valgrind.  Choose the load address accordingly.</p>
<p style="Normal" xid="679" props="text-align:left; dom-dir:ltr">AC_SUBST(VALT_LOAD_ADDRESS_PRI)</p>
<p style="Normal" xid="680" props="text-align:left; dom-dir:ltr">AC_SUBST(VALT_LOAD_ADDRESS_SEC)</p>
<p style="Normal" xid="681" props="text-align:left; dom-dir:ltr">AC_CACHE_CHECK([for use as an inner Valgrind], vg_cv_inner,</p>
<p style="Normal" xid="682" props="text-align:left; dom-dir:ltr">   [AC_ARG_ENABLE(inner, </p>
<p style="Normal" xid="683" props="text-align:left; dom-dir:ltr">      [  --enable-inner          enables self-hosting],</p>
<p style="Normal" xid="684" props="text-align:left; dom-dir:ltr">      [vg_cv_inner=$enableval],</p>
<p style="Normal" xid="685" props="text-align:left; dom-dir:ltr">      [vg_cv_inner=no])])</p>
<p style="Normal" xid="686" props="text-align:left; dom-dir:ltr">if test "$vg_cv_inner" = yes; then</p>
<p style="Normal" xid="687" props="text-align:left; dom-dir:ltr">    AC_DEFINE([ENABLE_INNER], 1, [configured to run as an inner Valgrind])</p>
<p style="Normal" xid="688" props="text-align:left; dom-dir:ltr">    VALT_LOAD_ADDRESS_PRI=$valt_load_address_pri_inner</p>
<p style="Normal" xid="689" props="text-align:left; dom-dir:ltr">    VALT_LOAD_ADDRESS_SEC=$valt_load_address_sec_inner</p>
<p style="Normal" xid="690" props="text-align:left; dom-dir:ltr">else</p>
<p style="Normal" xid="691" props="text-align:left; dom-dir:ltr">    VALT_LOAD_ADDRESS_PRI=$valt_load_address_pri_norml</p>
<p style="Normal" xid="692" props="text-align:left; dom-dir:ltr">    VALT_LOAD_ADDRESS_SEC=$valt_load_address_sec_norml</p>
<p style="Normal" xid="693" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="694"><c></c></p>
<p style="Normal" xid="695"><c></c></p>
<p style="Normal" xid="696">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="697" props="text-align:left; dom-dir:ltr"># Define MIPS_PAGE_SHIFT (--with-pagesize)</p>
<p style="Normal" xid="698">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="699" props="text-align:left; dom-dir:ltr">AC_ARG_WITH(pagesize,</p>
<p style="Normal" xid="700" props="text-align:left; dom-dir:ltr">   [  --with-pagesize=        override detected page size (4, 16 or 64)],</p>
<p style="Normal" xid="701" props="text-align:left; dom-dir:ltr">   [psize=$withval],</p>
<p style="Normal" xid="702" props="text-align:left; dom-dir:ltr">   [psize=0]</p>
<p style="Normal" xid="703">)</p>
<p style="Normal" xid="704"> </p>
<p style="Normal" xid="705" props="text-align:left; dom-dir:ltr">if test "$psize" = "0"; then</p>
<p style="Normal" xid="706" props="text-align:left; dom-dir:ltr">    psizer=`getconf PAGESIZE`</p>
<p style="Normal" xid="707" props="text-align:left; dom-dir:ltr">    let "psize=${psizer}/1024"</p>
<p style="Normal" xid="708" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="709"><c></c></p>
<p style="Normal" xid="710" props="text-align:left; dom-dir:ltr">if test "$psize" = "4"; then</p>
<p style="Normal" xid="711" props="text-align:left; dom-dir:ltr">    AC_DEFINE([MIPS_PAGE_SHIFT], 12, [configured page size 4k])</p>
<p style="Normal" xid="712" props="text-align:left; dom-dir:ltr">elif test "$psize" = "16"; then</p>
<p style="Normal" xid="713" props="text-align:left; dom-dir:ltr">    AC_DEFINE([MIPS_PAGE_SHIFT], 14, [configured page size 16k])</p>
<p style="Normal" xid="714" props="text-align:left; dom-dir:ltr">elif test "$psize" = "64"; then</p>
<p style="Normal" xid="715" props="text-align:left; dom-dir:ltr">    AC_DEFINE([MIPS_PAGE_SHIFT], 16, [configured page size 64k])</p>
<p style="Normal" xid="716" props="text-align:left; dom-dir:ltr">else</p>
<p style="Normal" xid="717" props="text-align:left; dom-dir:ltr">   AC_DEFINE([MIPS_PAGE_SHIFT], 12, [configured default page size 4k])</p>
<p style="Normal" xid="718" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="719" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([checking for Pagesize... ${psize}k])</p>
<p style="Normal" xid="720"><c></c></p>
<p style="Normal" xid="721">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="722" props="text-align:left; dom-dir:ltr"># Define shm_align for MIPS (--shared-memory-alignment)</p>
<p style="Normal" xid="723">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="724" props="text-align:left; dom-dir:ltr">AC_ARG_WITH(alignment,</p>
<p style="Normal" xid="725" props="text-align:left; dom-dir:ltr">   [  --with-alignment=       shared memory alignment for MIPS],</p>
<p style="Normal" xid="726" props="text-align:left; dom-dir:ltr">   [align=$withval],</p>
<p style="Normal" xid="727" props="text-align:left; dom-dir:ltr">   [align=-1]</p>
<p style="Normal" xid="728">)</p>
<p style="Normal" xid="729"><c></c></p>
<p style="Normal" xid="730" props="text-align:left; dom-dir:ltr">mod=`expr $align % 1024`</p>
<p style="Normal" xid="731"><c></c></p>
<p style="Normal" xid="732" props="text-align:left; dom-dir:ltr">let "psz=psize*1024*2"</p>
<p style="Normal" xid="733"><c></c></p>
<p style="Normal" xid="734" props="text-align:left; dom-dir:ltr">if test "$align" = "-1"; then</p>
<p style="Normal" xid="735" props="text-align:left; dom-dir:ltr">    AC_DEFINE([SHM_ALIGNMENT], 2*(1UL &lt;&lt; MIPS_PAGE_SHIFT), </p>
<p style="Normal" xid="736" props="text-align:left; dom-dir:ltr">              [configured memory alignment 2*PAGE_SIZE])</p>
<p style="Normal" xid="737" props="text-align:left; dom-dir:ltr">    AC_MSG_RESULT([checking for shared memory alignment... 2*PAGE_SIZE])</p>
<p style="Normal" xid="738" props="text-align:left; dom-dir:ltr">elif test "$mod" = "0"; then</p>
<p style="Normal" xid="739" props="text-align:left; dom-dir:ltr">    if test $align -lt $psz;</p>
<p style="Normal" xid="740" props="text-align:left; dom-dir:ltr">    then</p>
<p style="Normal" xid="741" props="text-align:left; dom-dir:ltr">        AC_MSG_ERROR([Alignment must be &gt;= PAGE_SIZE])</p>
<p style="Normal" xid="742" props="text-align:left; dom-dir:ltr">    else</p>
<p style="Normal" xid="743" props="text-align:left; dom-dir:ltr">        AC_DEFINE_UNQUOTED([SHM_ALIGNMENT], ${align}, </p>
<p style="Normal" xid="744" props="text-align:left; dom-dir:ltr">                  [configured memory alignment 2*PAGE_SIZE])</p>
<p style="Normal" xid="745" props="text-align:left; dom-dir:ltr">        AC_MSG_RESULT([checking for shared memory alignment... ${align}])     </p>
<p style="Normal" xid="746" props="text-align:left; dom-dir:ltr">    fi</p>
<p style="Normal" xid="747" props="text-align:left; dom-dir:ltr">else</p>
<p style="Normal" xid="748" props="text-align:left; dom-dir:ltr">    AC_MSG_ERROR([Alignment % 1024 must be zero])</p>
<p style="Normal" xid="749" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="750"><c></c></p>
<p style="Normal" xid="751"><c></c></p>
<p style="Normal" xid="752">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="753" props="text-align:left; dom-dir:ltr"># Extra fine-tuning of installation directories</p>
<p style="Normal" xid="754">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="755" props="text-align:left; dom-dir:ltr">AC_ARG_WITH(tmpdir,</p>
<p style="Normal" xid="756" props="text-align:left; dom-dir:ltr">   [  --with-tmpdir=PATH      Specify path for temporary files],</p>
<p style="Normal" xid="757" props="text-align:left; dom-dir:ltr">   tmpdir="$withval",</p>
<p style="Normal" xid="758" props="text-align:left; dom-dir:ltr">   tmpdir="/tmp")</p>
<p style="Normal" xid="759" props="text-align:left; dom-dir:ltr">AC_DEFINE_UNQUOTED(VG_TMPDIR, "$tmpdir", [Temporary files directory])</p>
<p style="Normal" xid="760"><c></c></p>
<p style="Normal" xid="761"><c></c></p>
<p style="Normal" xid="762">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="763" props="text-align:left; dom-dir:ltr"># Libc and suppressions</p>
<p style="Normal" xid="764">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="765" props="text-align:left; dom-dir:ltr"># This variable will collect the suppression files to be used.</p>
<p style="Normal" xid="766" props="text-align:left; dom-dir:ltr">AC_SUBST(DEFAULT_SUPP)</p>
<p style="Normal" xid="767"><c></c></p>
<p style="Normal" xid="768" props="text-align:left; dom-dir:ltr">AC_CHECK_HEADER([features.h])</p>
<p style="Normal" xid="769"><c></c></p>
<p style="Normal" xid="770" props="text-align:left; dom-dir:ltr">if test x$ac_cv_header_features_h = xyes; then</p>
<p style="Normal" xid="771" props="text-align:left; dom-dir:ltr">  rm -f conftest.$ac_ext</p>
<p style="Normal" xid="772" props="text-align:left; dom-dir:ltr">  cat &lt;&lt;_ACEOF &gt;conftest.$ac_ext</p>
<p style="Normal" xid="773" props="text-align:left; dom-dir:ltr">#include &lt;features.h&gt;</p>
<p style="Normal" xid="774" props="text-align:left; dom-dir:ltr">#if defined(__GNU_LIBRARY__) &amp;&amp; defined(__GLIBC__) &amp;&amp; defined(__GLIBC_MINOR__)</p>
<p style="Normal" xid="775" props="text-align:left; dom-dir:ltr">glibc version is: __GLIBC__ __GLIBC_MINOR__</p>
<p style="Normal" xid="776" props="text-align:left; dom-dir:ltr">#endif</p>
<p style="Normal" xid="777" props="text-align:left; dom-dir:ltr">_ACEOF</p>
<p style="Normal" xid="778" props="text-align:left; dom-dir:ltr">  GLIBC_VERSION="`$CPP conftest.$ac_ext | $SED -n 's/^glibc version is: //p' | $SED 's/ /./g'`"</p>
<p style="Normal" xid="779" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="780"><c></c></p>
<p style="Normal" xid="781" props="text-align:left; dom-dir:ltr"># not really a version check</p>
<p style="Normal" xid="782" props="text-align:left; dom-dir:ltr">AC_EGREP_CPP([DARWIN_LIBC], [</p>
<p style="Normal" xid="783" props="text-align:left; dom-dir:ltr">#include &lt;sys/cdefs.h&gt;</p>
<p style="Normal" xid="784" props="text-align:left; dom-dir:ltr">#if defined(__DARWIN_VERS_1050)</p>
<p style="Normal" xid="785" props="text-align:left; dom-dir:ltr">  DARWIN_LIBC</p>
<p style="Normal" xid="786" props="text-align:left; dom-dir:ltr">#endif</p>
<p style="Normal" xid="787">],</p>
<p style="Normal" xid="788" props="text-align:left; dom-dir:ltr">GLIBC_VERSION="darwin")</p>
<p style="Normal" xid="789"><c></c></p>
<p style="Normal" xid="790" props="text-align:left; dom-dir:ltr"># not really a version check</p>
<p style="Normal" xid="791" props="text-align:left; dom-dir:ltr">AC_EGREP_CPP([BIONIC_LIBC], [</p>
<p style="Normal" xid="792" props="text-align:left; dom-dir:ltr">#if defined(__ANDROID__)</p>
<p style="Normal" xid="793" props="text-align:left; dom-dir:ltr">  BIONIC_LIBC</p>
<p style="Normal" xid="794" props="text-align:left; dom-dir:ltr">#endif</p>
<p style="Normal" xid="795">],</p>
<p style="Normal" xid="796" props="text-align:left; dom-dir:ltr">GLIBC_VERSION="bionic")</p>
<p style="Normal" xid="797"><c></c></p>
<p style="Normal" xid="798"><c></c></p>
<p style="Normal" xid="799" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([the GLIBC_VERSION version])</p>
<p style="Normal" xid="800"><c></c></p>
<p style="Normal" xid="801" props="text-align:left; dom-dir:ltr">case "${GLIBC_VERSION}" in</p>
<p style="Normal" xid="802">     2.2)</p>
<p style="Normal" xid="803" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.2 family)</p>
<p style="Normal" xid="804" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_2], 1, [Define to 1 if you're using glibc 2.2.x])</p>
<p style="Normal" xid="805" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.2.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="806" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.2-LinuxThreads-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="807" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="808">	;;</p>
<p style="Normal" xid="809"><c></c></p>
<p style="Normal" xid="810">     2.3)</p>
<p style="Normal" xid="811" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.3 family)</p>
<p style="Normal" xid="812" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_3], 1, [Define to 1 if you're using glibc 2.3.x])</p>
<p style="Normal" xid="813" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.3.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="814" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="815" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="816">	;;</p>
<p style="Normal" xid="817"><c></c></p>
<p style="Normal" xid="818">     2.4)</p>
<p style="Normal" xid="819" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.4 family)</p>
<p style="Normal" xid="820" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_4], 1, [Define to 1 if you're using glibc 2.4.x])</p>
<p style="Normal" xid="821" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.4.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="822" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="823" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="824">	;;</p>
<p style="Normal" xid="825"><c></c></p>
<p style="Normal" xid="826">     2.5)</p>
<p style="Normal" xid="827" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.5 family)</p>
<p style="Normal" xid="828" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_5], 1, [Define to 1 if you're using glibc 2.5.x])</p>
<p style="Normal" xid="829" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.5.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="830" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="831" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="832">	;;</p>
<p style="Normal" xid="833">     2.6)</p>
<p style="Normal" xid="834" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.6 family)</p>
<p style="Normal" xid="835" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_6], 1, [Define to 1 if you're using glibc 2.6.x])</p>
<p style="Normal" xid="836" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.6.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="837" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="838" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="839">	;;</p>
<p style="Normal" xid="840">     2.7)</p>
<p style="Normal" xid="841" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.7 family)</p>
<p style="Normal" xid="842" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_7], 1, [Define to 1 if you're using glibc 2.7.x])</p>
<p style="Normal" xid="843" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="844" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="845" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="846">	;;</p>
<p style="Normal" xid="847">     2.8)</p>
<p style="Normal" xid="848" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.8 family)</p>
<p style="Normal" xid="849" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_8], 1, [Define to 1 if you're using glibc 2.8.x])</p>
<p style="Normal" xid="850" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="851" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="852" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="853">	;;</p>
<p style="Normal" xid="854">     2.9)</p>
<p style="Normal" xid="855" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.9 family)</p>
<p style="Normal" xid="856" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_9], 1, [Define to 1 if you're using glibc 2.9.x])</p>
<p style="Normal" xid="857" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="858" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="859" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="860">	;;</p>
<p style="Normal" xid="861">     2.10)</p>
<p style="Normal" xid="862" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.10 family)</p>
<p style="Normal" xid="863" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_10], 1, [Define to 1 if you're using glibc 2.10.x])</p>
<p style="Normal" xid="864" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="865" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="866" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="867">	;;</p>
<p style="Normal" xid="868">     2.11)</p>
<p style="Normal" xid="869" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.11 family)</p>
<p style="Normal" xid="870" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_11], 1, [Define to 1 if you're using glibc 2.11.x])</p>
<p style="Normal" xid="871" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="872" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="873" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="874">        ;;</p>
<p style="Normal" xid="875">     2.12)</p>
<p style="Normal" xid="876" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.12 family)</p>
<p style="Normal" xid="877" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_12], 1, [Define to 1 if you're using glibc 2.12.x])</p>
<p style="Normal" xid="878" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="879" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="880" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="881">	;;</p>
<p style="Normal" xid="882">     2.13)</p>
<p style="Normal" xid="883" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.13 family)</p>
<p style="Normal" xid="884" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_13], 1, [Define to 1 if you're using glibc 2.13.x])</p>
<p style="Normal" xid="885" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="886" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="887" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="888">	;;</p>
<p style="Normal" xid="889">     2.14)</p>
<p style="Normal" xid="890" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.14 family)</p>
<p style="Normal" xid="891" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_14], 1, [Define to 1 if you're using glibc 2.14.x])</p>
<p style="Normal" xid="892" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="893" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="894" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="895">	;;</p>
<p style="Normal" xid="896">     2.15)</p>
<p style="Normal" xid="897" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.15 family)</p>
<p style="Normal" xid="898" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_15], 1, [Define to 1 if you're using glibc 2.15.x])</p>
<p style="Normal" xid="899" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="900" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="901" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="902">	;;</p>
<p style="Normal" xid="903">     2.18)</p>
<p style="Normal" xid="904" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(2.18 family)</p>
<p style="Normal" xid="905" props="text-align:left; dom-dir:ltr">	AC_DEFINE([GLIBC_2_18], 1, [Define to 1 if you're using glibc 2.18.x])</p>
<p style="Normal" xid="906" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="907" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.34567-NPTL-helgrind.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="908" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="glibc-2.X-drd.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="909">	;;</p>
<p style="Normal" xid="910" props="text-align:left; dom-dir:ltr">     darwin)</p>
<p style="Normal" xid="911" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(Darwin)</p>
<p style="Normal" xid="912" props="text-align:left; dom-dir:ltr">	AC_DEFINE([DARWIN_LIBC], 1, [Define to 1 if you're using Darwin])</p>
<p style="Normal" xid="913" props="text-align:left; dom-dir:ltr">	# DEFAULT_SUPP set by kernel version check above.</p>
<p style="Normal" xid="914">	;;</p>
<p style="Normal" xid="915" props="text-align:left; dom-dir:ltr">     bionic)</p>
<p style="Normal" xid="916" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT(Bionic)</p>
<p style="Normal" xid="917" props="text-align:left; dom-dir:ltr">	AC_DEFINE([BIONIC_LIBC], 1, [Define to 1 if you're using Bionic])</p>
<p style="Normal" xid="918" props="text-align:left; dom-dir:ltr">	DEFAULT_SUPP="bionic.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="919">	;;</p>
<p style="Normal" xid="920"><c></c></p>
<p style="Normal" xid="921">     *)</p>
<p style="Normal" xid="922" props="text-align:left; dom-dir:ltr">	AC_MSG_RESULT([unsupported version ${GLIBC_VERSION}])</p>
<p style="Normal" xid="923" props="text-align:left; dom-dir:ltr">	AC_MSG_ERROR([Valgrind requires glibc version 2.2 - 2.16])</p>
<p style="Normal" xid="924" props="text-align:left; dom-dir:ltr">	AC_MSG_ERROR([or Darwin libc])</p>
<p style="Normal" xid="925">	;;</p>
<p style="Normal" xid="926" props="text-align:left; dom-dir:ltr">esac</p>
<p style="Normal" xid="927"><c></c></p>
<p style="Normal" xid="928" props="text-align:left; dom-dir:ltr">AC_SUBST(GLIBC_VERSION)</p>
<p style="Normal" xid="929"><c></c></p>
<p style="Normal" xid="930"><c></c></p>
<p style="Normal" xid="931" props="text-align:left; dom-dir:ltr"># Add default suppressions for the X client libraries.  Make no</p>
<p style="Normal" xid="932" props="text-align:left; dom-dir:ltr"># attempt to detect whether such libraries are installed on the</p>
<p style="Normal" xid="933" props="text-align:left; dom-dir:ltr"># build machine (or even if any X facilities are present); just</p>
<p style="Normal" xid="934" props="text-align:left; dom-dir:ltr"># add the suppressions antidisirregardless.</p>
<p style="Normal" xid="935" props="text-align:left; dom-dir:ltr">DEFAULT_SUPP="xfree-4.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="936" props="text-align:left; dom-dir:ltr">DEFAULT_SUPP="xfree-3.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="937"><c></c></p>
<p style="Normal" xid="938" props="text-align:left; dom-dir:ltr"># Add glibc and X11 suppressions for exp-sgcheck</p>
<p style="Normal" xid="939" props="text-align:left; dom-dir:ltr">DEFAULT_SUPP="exp-sgcheck.supp ${DEFAULT_SUPP}"</p>
<p style="Normal" xid="940"><c></c></p>
<p style="Normal" xid="941"><c></c></p>
<p style="Normal" xid="942">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="943" props="text-align:left; dom-dir:ltr"># Platform variants?</p>
<p style="Normal" xid="944">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="945"><c></c></p>
<p style="Normal" xid="946" props="text-align:left; dom-dir:ltr"># Normally the PLAT = (ARCH, OS) characterisation of the platform is enough.</p>
<p style="Normal" xid="947" props="text-align:left; dom-dir:ltr"># But there are times where we need a bit more control.  The motivating</p>
<p style="Normal" xid="948" props="text-align:left; dom-dir:ltr"># and currently only case is Android: this is almost identical to</p>
<p style="Normal" xid="949" props="text-align:left; dom-dir:ltr"># {x86,arm}-linux, but not quite.  So this introduces the concept of platform</p>
<p style="Normal" xid="950" props="text-align:left; dom-dir:ltr"># variant tags, which get passed in the compile as -DVGPV_&lt;arch&gt;_&lt;os&gt;_&lt;variant&gt;</p>
<p style="Normal" xid="951" props="text-align:left; dom-dir:ltr"># along with the main -DVGP_&lt;arch&gt;_&lt;os&gt; definition.</p>
<p style="Normal" xid="952">#</p>
<p style="Normal" xid="953" props="text-align:left; dom-dir:ltr"># In almost all cases, the &lt;variant&gt; bit is "vanilla".  But for Android</p>
<p style="Normal" xid="954" props="text-align:left; dom-dir:ltr"># it is "android" instead.</p>
<p style="Normal" xid="955">#</p>
<p style="Normal" xid="956" props="text-align:left; dom-dir:ltr"># Consequently (eg), plain arm-linux would build with</p>
<p style="Normal" xid="957">#</p>
<p style="Normal" xid="958" props="text-align:left; dom-dir:ltr">#   -DVGP_arm_linux -DVGPV_arm_linux_vanilla</p>
<p style="Normal" xid="959">#</p>
<p style="Normal" xid="960" props="text-align:left; dom-dir:ltr"># whilst an Android build would have</p>
<p style="Normal" xid="961">#</p>
<p style="Normal" xid="962" props="text-align:left; dom-dir:ltr">#   -DVGP_arm_linux -DVGPV_arm_linux_android</p>
<p style="Normal" xid="963">#</p>
<p style="Normal" xid="964" props="text-align:left; dom-dir:ltr"># Same for x86. The setup of the platform variant is pushed relatively far</p>
<p style="Normal" xid="965" props="text-align:left; dom-dir:ltr"># down this file in order that we can inspect any of the variables set above.</p>
<p style="Normal" xid="966"><c></c></p>
<p style="Normal" xid="967" props="text-align:left; dom-dir:ltr"># In the normal case ..</p>
<p style="Normal" xid="968" props="text-align:left; dom-dir:ltr">VGCONF_PLATVARIANT="vanilla"</p>
<p style="Normal" xid="969"><c></c></p>
<p style="Normal" xid="970" props="text-align:left; dom-dir:ltr"># Android ?</p>
<p style="Normal" xid="971" props="text-align:left; dom-dir:ltr">if test "$GLIBC_VERSION" = "bionic";</p>
<p style="Normal" xid="972" props="text-align:left; dom-dir:ltr">then</p>
<p style="Normal" xid="973" props="text-align:left; dom-dir:ltr">   VGCONF_PLATVARIANT="android"</p>
<p style="Normal" xid="974" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="975"><c></c></p>
<p style="Normal" xid="976" props="text-align:left; dom-dir:ltr">AC_SUBST(VGCONF_PLATVARIANT)</p>
<p style="Normal" xid="977"><c></c></p>
<p style="Normal" xid="978"><c></c></p>
<p style="Normal" xid="979" props="text-align:left; dom-dir:ltr"># FIXME: do we also want to define automake variables</p>
<p style="Normal" xid="980" props="text-align:left; dom-dir:ltr"># VGCONF_PLATVARIANT_IS_&lt;WHATEVER&gt;, where WHATEVER is (currently)</p>
<p style="Normal" xid="981" props="text-align:left; dom-dir:ltr"># VANILLA or ANDROID ?  This would be in the style of VGCONF_ARCHS_INCLUDE,</p>
<p style="Normal" xid="982" props="text-align:left; dom-dir:ltr"># VGCONF_PLATFORMS_INCLUDE and VGCONF_OS_IS above?  Could easily enough</p>
<p style="Normal" xid="983" props="text-align:left; dom-dir:ltr"># do that.  Problem is that we can't do and-ing in Makefile.am's, but</p>
<p style="Normal" xid="984" props="text-align:left; dom-dir:ltr"># that's what we'd need to do to use this, since what we'd want to write</p>
<p style="Normal" xid="985" props="text-align:left; dom-dir:ltr"># is something like</p>
<p style="Normal" xid="986">#</p>
<p style="Normal" xid="987" props="text-align:left; dom-dir:ltr"># VGCONF_PLATFORMS_INCLUDE_ARM_LINUX &amp;&amp; VGCONF_PLATVARIANT_IS_ANDROID</p>
<p style="Normal" xid="988">#</p>
<p style="Normal" xid="989" props="text-align:left; dom-dir:ltr"># Hmm.  Can't think of a nice clean solution to this.</p>
<p style="Normal" xid="990"><c></c></p>
<p style="Normal" xid="991" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_PLATVARIANT_IS_VANILLA,</p>
<p style="Normal" xid="992" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATVARIANT = xvanilla)</p>
<p style="Normal" xid="993" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(VGCONF_PLATVARIANT_IS_ANDROID,</p>
<p style="Normal" xid="994" props="text-align:left; dom-dir:ltr">               test x$VGCONF_PLATVARIANT = xandroid)</p>
<p style="Normal" xid="995"><c></c></p>
<p style="Normal" xid="996"><c></c></p>
<p style="Normal" xid="997">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="998" props="text-align:left; dom-dir:ltr"># Checking for various library functions and other definitions</p>
<p style="Normal" xid="999">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="1000"><c></c></p>
<p style="Normal" xid="1001" props="text-align:left; dom-dir:ltr"># Check for CLOCK_MONOTONIC</p>
<p style="Normal" xid="1002"><c></c></p>
<p style="Normal" xid="1003" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for CLOCK_MONOTONIC])</p>
<p style="Normal" xid="1004"><c></c></p>
<p style="Normal" xid="1005" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="1006" props="text-align:left; dom-dir:ltr">#include &lt;time.h&gt;</p>
<p style="Normal" xid="1007">]], [[</p>
<p style="Normal" xid="1008" props="text-align:left; dom-dir:ltr">  struct timespec t;</p>
<p style="Normal" xid="1009" props="text-align:left; dom-dir:ltr">  clock_gettime(CLOCK_MONOTONIC, &amp;t);</p>
<p style="Normal" xid="1010" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1011">]])], [</p>
<p style="Normal" xid="1012" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1013" props="text-align:left; dom-dir:ltr">AC_DEFINE([HAVE_CLOCK_MONOTONIC], 1,</p>
<p style="Normal" xid="1014" props="text-align:left; dom-dir:ltr">          [Define to 1 if you have the `CLOCK_MONOTONIC' constant.])</p>
<p style="Normal" xid="1015">], [</p>
<p style="Normal" xid="1016" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1017">])</p>
<p style="Normal" xid="1018"><c></c></p>
<p style="Normal" xid="1019"><c></c></p>
<p style="Normal" xid="1020" props="text-align:left; dom-dir:ltr"># Check for PTHREAD_RWLOCK_T</p>
<p style="Normal" xid="1021"><c></c></p>
<p style="Normal" xid="1022" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for pthread_rwlock_t])</p>
<p style="Normal" xid="1023"><c></c></p>
<p style="Normal" xid="1024" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="1025" props="text-align:left; dom-dir:ltr">#define _GNU_SOURCE</p>
<p style="Normal" xid="1026" props="text-align:left; dom-dir:ltr">#include &lt;pthread.h&gt;</p>
<p style="Normal" xid="1027">]], [[</p>
<p style="Normal" xid="1028" props="text-align:left; dom-dir:ltr">  pthread_rwlock_t rwl;</p>
<p style="Normal" xid="1029">]])], [</p>
<p style="Normal" xid="1030" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1031" props="text-align:left; dom-dir:ltr">AC_DEFINE([HAVE_PTHREAD_RWLOCK_T], 1,</p>
<p style="Normal" xid="1032" props="text-align:left; dom-dir:ltr">          [Define to 1 if you have the `pthread_rwlock_t' type.])</p>
<p style="Normal" xid="1033">], [</p>
<p style="Normal" xid="1034" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1035">])</p>
<p style="Normal" xid="1036"><c></c></p>
<p style="Normal" xid="1037"><c></c></p>
<p style="Normal" xid="1038" props="text-align:left; dom-dir:ltr"># Check for PTHREAD_MUTEX_ADAPTIVE_NP</p>
<p style="Normal" xid="1039"><c></c></p>
<p style="Normal" xid="1040" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for PTHREAD_MUTEX_ADAPTIVE_NP])</p>
<p style="Normal" xid="1041"><c></c></p>
<p style="Normal" xid="1042" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="1043" props="text-align:left; dom-dir:ltr">#define _GNU_SOURCE</p>
<p style="Normal" xid="1044" props="text-align:left; dom-dir:ltr">#include &lt;pthread.h&gt;</p>
<p style="Normal" xid="1045">]], [[</p>
<p style="Normal" xid="1046" props="text-align:left; dom-dir:ltr">  return (PTHREAD_MUTEX_ADAPTIVE_NP);</p>
<p style="Normal" xid="1047">]])], [</p>
<p style="Normal" xid="1048" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1049" props="text-align:left; dom-dir:ltr">AC_DEFINE([HAVE_PTHREAD_MUTEX_ADAPTIVE_NP], 1,</p>
<p style="Normal" xid="1050" props="text-align:left; dom-dir:ltr">          [Define to 1 if you have the `PTHREAD_MUTEX_ADAPTIVE_NP' constant.])</p>
<p style="Normal" xid="1051">], [</p>
<p style="Normal" xid="1052" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1053">])</p>
<p style="Normal" xid="1054"><c></c></p>
<p style="Normal" xid="1055"><c></c></p>
<p style="Normal" xid="1056" props="text-align:left; dom-dir:ltr"># Check for PTHREAD_MUTEX_ERRORCHECK_NP</p>
<p style="Normal" xid="1057"><c></c></p>
<p style="Normal" xid="1058" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for PTHREAD_MUTEX_ERRORCHECK_NP])</p>
<p style="Normal" xid="1059"><c></c></p>
<p style="Normal" xid="1060" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="1061" props="text-align:left; dom-dir:ltr">#define _GNU_SOURCE</p>
<p style="Normal" xid="1062" props="text-align:left; dom-dir:ltr">#include &lt;pthread.h&gt;</p>
<p style="Normal" xid="1063">]], [[</p>
<p style="Normal" xid="1064" props="text-align:left; dom-dir:ltr">  return (PTHREAD_MUTEX_ERRORCHECK_NP);</p>
<p style="Normal" xid="1065">]])], [</p>
<p style="Normal" xid="1066" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1067" props="text-align:left; dom-dir:ltr">AC_DEFINE([HAVE_PTHREAD_MUTEX_ERRORCHECK_NP], 1,</p>
<p style="Normal" xid="1068" props="text-align:left; dom-dir:ltr">          [Define to 1 if you have the `PTHREAD_MUTEX_ERRORCHECK_NP' constant.])</p>
<p style="Normal" xid="1069">], [</p>
<p style="Normal" xid="1070" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1071">])</p>
<p style="Normal" xid="1072"><c></c></p>
<p style="Normal" xid="1073"><c></c></p>
<p style="Normal" xid="1074" props="text-align:left; dom-dir:ltr"># Check for PTHREAD_MUTEX_RECURSIVE_NP</p>
<p style="Normal" xid="1075"><c></c></p>
<p style="Normal" xid="1076" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for PTHREAD_MUTEX_RECURSIVE_NP])</p>
<p style="Normal" xid="1077"><c></c></p>
<p style="Normal" xid="1078" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="1079" props="text-align:left; dom-dir:ltr">#define _GNU_SOURCE</p>
<p style="Normal" xid="1080" props="text-align:left; dom-dir:ltr">#include &lt;pthread.h&gt;</p>
<p style="Normal" xid="1081">]], [[</p>
<p style="Normal" xid="1082" props="text-align:left; dom-dir:ltr">  return (PTHREAD_MUTEX_RECURSIVE_NP);</p>
<p style="Normal" xid="1083">]])], [</p>
<p style="Normal" xid="1084" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1085" props="text-align:left; dom-dir:ltr">AC_DEFINE([HAVE_PTHREAD_MUTEX_RECURSIVE_NP], 1,</p>
<p style="Normal" xid="1086" props="text-align:left; dom-dir:ltr">          [Define to 1 if you have the `PTHREAD_MUTEX_RECURSIVE_NP' constant.])</p>
<p style="Normal" xid="1087">], [</p>
<p style="Normal" xid="1088" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1089">])</p>
<p style="Normal" xid="1090"><c></c></p>
<p style="Normal" xid="1091"><c></c></p>
<p style="Normal" xid="1092" props="text-align:left; dom-dir:ltr"># Check for PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP</p>
<p style="Normal" xid="1093"><c></c></p>
<p style="Normal" xid="1094" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP])</p>
<p style="Normal" xid="1095"><c></c></p>
<p style="Normal" xid="1096" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="1097" props="text-align:left; dom-dir:ltr">#define _GNU_SOURCE</p>
<p style="Normal" xid="1098" props="text-align:left; dom-dir:ltr">#include &lt;pthread.h&gt;</p>
<p style="Normal" xid="1099">]], [[</p>
<p style="Normal" xid="1100" props="text-align:left; dom-dir:ltr">  pthread_mutex_t m = PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP;</p>
<p style="Normal" xid="1101" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1102">]])], [</p>
<p style="Normal" xid="1103" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1104" props="text-align:left; dom-dir:ltr">AC_DEFINE([HAVE_PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP], 1,</p>
<p style="Normal" xid="1105" props="text-align:left; dom-dir:ltr">          [Define to 1 if you have the `PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP' constant.])</p>
<p style="Normal" xid="1106">], [</p>
<p style="Normal" xid="1107" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1108">])</p>
<p style="Normal" xid="1109"><c></c></p>
<p style="Normal" xid="1110"><c></c></p>
<p style="Normal" xid="1111" props="text-align:left; dom-dir:ltr"># Check whether pthread_mutex_t has a member called __m_kind.</p>
<p style="Normal" xid="1112"><c></c></p>
<p style="Normal" xid="1113" props="text-align:left; dom-dir:ltr">AC_CHECK_MEMBER([pthread_mutex_t.__m_kind],</p>
<p style="Normal" xid="1114" props="text-align:left; dom-dir:ltr">	        [AC_DEFINE([HAVE_PTHREAD_MUTEX_T__M_KIND],</p>
<p style="Normal" xid="1115">		           1,                                   </p>
<p style="Normal" xid="1116" props="text-align:left; dom-dir:ltr">			   [Define to 1 if pthread_mutex_t has a member called __m_kind.])</p>
<p style="Normal" xid="1117">                ],</p>
<p style="Normal" xid="1118">		[],</p>
<p style="Normal" xid="1119" props="text-align:left; dom-dir:ltr">		[#include &lt;pthread.h&gt;])</p>
<p style="Normal" xid="1120"><c></c></p>
<p style="Normal" xid="1121"><c></c></p>
<p style="Normal" xid="1122" props="text-align:left; dom-dir:ltr"># Check whether pthread_mutex_t has a member called __data.__kind.</p>
<p style="Normal" xid="1123"><c></c></p>
<p style="Normal" xid="1124" props="text-align:left; dom-dir:ltr">AC_CHECK_MEMBER([pthread_mutex_t.__data.__kind],</p>
<p style="Normal" xid="1125" props="text-align:left; dom-dir:ltr">                [AC_DEFINE([HAVE_PTHREAD_MUTEX_T__DATA__KIND],</p>
<p style="Normal" xid="1126">		          1,</p>
<p style="Normal" xid="1127" props="text-align:left; dom-dir:ltr">			  [Define to 1 if pthread_mutex_t has a member __data.__kind.])</p>
<p style="Normal" xid="1128">                ],</p>
<p style="Normal" xid="1129">		[],</p>
<p style="Normal" xid="1130" props="text-align:left; dom-dir:ltr">		[#include &lt;pthread.h&gt;])</p>
<p style="Normal" xid="1131"><c></c></p>
<p style="Normal" xid="1132"><c></c></p>
<p style="Normal" xid="1133" props="text-align:left; dom-dir:ltr"># does this compiler support -maltivec and does it have the include file</p>
<p style="Normal" xid="1134" props="text-align:left; dom-dir:ltr"># &lt;altivec.h&gt; ?</p>
<p style="Normal" xid="1135"><c></c></p>
<p style="Normal" xid="1136" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for Altivec])</p>
<p style="Normal" xid="1137"><c></c></p>
<p style="Normal" xid="1138" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1139" props="text-align:left; dom-dir:ltr">CFLAGS="-maltivec"</p>
<p style="Normal" xid="1140"><c></c></p>
<p style="Normal" xid="1141" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="1142" props="text-align:left; dom-dir:ltr">#include &lt;altivec.h&gt;</p>
<p style="Normal" xid="1143">]], [[</p>
<p style="Normal" xid="1144" props="text-align:left; dom-dir:ltr">  vector unsigned int v;</p>
<p style="Normal" xid="1145">]])], [</p>
<p style="Normal" xid="1146" props="text-align:left; dom-dir:ltr">ac_have_altivec=yes</p>
<p style="Normal" xid="1147" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1148" props="text-align:left; dom-dir:ltr">AC_DEFINE([HAS_ALTIVEC], 1,</p>
<p style="Normal" xid="1149" props="text-align:left; dom-dir:ltr">          [Define to 1 if gcc/as can do Altivec.])</p>
<p style="Normal" xid="1150">], [</p>
<p style="Normal" xid="1151" props="text-align:left; dom-dir:ltr">ac_have_altivec=no</p>
<p style="Normal" xid="1152" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1153">])</p>
<p style="Normal" xid="1154" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1155"><c></c></p>
<p style="Normal" xid="1156" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([HAS_ALTIVEC], [test x$ac_have_altivec = xyes])</p>
<p style="Normal" xid="1157"><c></c></p>
<p style="Normal" xid="1158"><c></c></p>
<p style="Normal" xid="1159" props="text-align:left; dom-dir:ltr"># Check that both: the compiler supports -mvsx and that the assembler</p>
<p style="Normal" xid="1160" props="text-align:left; dom-dir:ltr"># understands VSX instructions.  If either of those doesn't work,</p>
<p style="Normal" xid="1161" props="text-align:left; dom-dir:ltr"># conclude that we can't do VSX.  NOTE: basically this is a kludge</p>
<p style="Normal" xid="1162" props="text-align:left; dom-dir:ltr"># in that it conflates two things that should be separate -- whether</p>
<p style="Normal" xid="1163" props="text-align:left; dom-dir:ltr"># the compiler understands the flag vs whether the assembler </p>
<p style="Normal" xid="1164" props="text-align:left; dom-dir:ltr"># understands the opcodes.  This really ought to be cleaned up</p>
<p style="Normal" xid="1165" props="text-align:left; dom-dir:ltr"># and done properly, like it is for x86/x86_64.</p>
<p style="Normal" xid="1166"><c></c></p>
<p style="Normal" xid="1167" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for VSX])</p>
<p style="Normal" xid="1168"><c></c></p>
<p style="Normal" xid="1169" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1170" props="text-align:left; dom-dir:ltr">CFLAGS="-mvsx"</p>
<p style="Normal" xid="1171"><c></c></p>
<p style="Normal" xid="1172" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="1173" props="text-align:left; dom-dir:ltr">#include &lt;altivec.h&gt;</p>
<p style="Normal" xid="1174">]], [[</p>
<p style="Normal" xid="1175" props="text-align:left; dom-dir:ltr">  vector unsigned int v;</p>
<p style="Normal" xid="1176" props="text-align:left; dom-dir:ltr">  __asm__ __volatile__("xsmaddadp 32, 32, 33" ::: "memory","cc");</p>
<p style="Normal" xid="1177">]])], [</p>
<p style="Normal" xid="1178" props="text-align:left; dom-dir:ltr">ac_have_vsx=yes</p>
<p style="Normal" xid="1179" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1180">], [</p>
<p style="Normal" xid="1181" props="text-align:left; dom-dir:ltr">ac_have_vsx=no</p>
<p style="Normal" xid="1182" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1183">])</p>
<p style="Normal" xid="1184" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1185"><c></c></p>
<p style="Normal" xid="1186" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(HAS_VSX, test x$ac_have_vsx = xyes)</p>
<p style="Normal" xid="1187"><c></c></p>
<p style="Normal" xid="1188"><c></c></p>
<p style="Normal" xid="1189" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([that assembler knows DFP])</p>
<p style="Normal" xid="1190"><c></c></p>
<p style="Normal" xid="1191" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="1192">]], [[</p>
<p style="Normal" xid="1193" props="text-align:left; dom-dir:ltr">  __asm__ __volatile__("dadd 1, 2, 3");</p>
<p style="Normal" xid="1194" props="text-align:left; dom-dir:ltr">  __asm__ __volatile__("dcffix 1, 2");</p>
<p style="Normal" xid="1195">]])], [</p>
<p style="Normal" xid="1196" props="text-align:left; dom-dir:ltr">ac_asm_have_dfp=yes</p>
<p style="Normal" xid="1197" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1198">], [</p>
<p style="Normal" xid="1199" props="text-align:left; dom-dir:ltr">ac_asm_have_dfp=no</p>
<p style="Normal" xid="1200" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1201">])</p>
<p style="Normal" xid="1202"><c></c></p>
<p style="Normal" xid="1203"><c></c></p>
<p style="Normal" xid="1204" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([that compiler knows -mhard-dfp switch])</p>
<p style="Normal" xid="1205" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1206" props="text-align:left; dom-dir:ltr">CFLAGS="-mhard-dfp"</p>
<p style="Normal" xid="1207" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="1208">]], [[</p>
<p style="Normal" xid="1209" props="text-align:left; dom-dir:ltr">  __asm__ __volatile__("dadd 1, 2, 3");</p>
<p style="Normal" xid="1210" props="text-align:left; dom-dir:ltr">  __asm__ __volatile__("dcffix 1, 2");</p>
<p style="Normal" xid="1211">]])], [</p>
<p style="Normal" xid="1212" props="text-align:left; dom-dir:ltr">ac_gcc_have_dfp=yes</p>
<p style="Normal" xid="1213" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1214">], [</p>
<p style="Normal" xid="1215" props="text-align:left; dom-dir:ltr">ac_gcc_have_dfp=no</p>
<p style="Normal" xid="1216" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1217">])</p>
<p style="Normal" xid="1218"><c></c></p>
<p style="Normal" xid="1219" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1220"><c></c></p>
<p style="Normal" xid="1221" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(HAS_DFP, test x$ac_asm_have_dfp = xyes -a x$ac_gcc_have_dfp = xyes)</p>
<p style="Normal" xid="1222"><c></c></p>
<p style="Normal" xid="1223"><c></c></p>
<p style="Normal" xid="1224" props="text-align:left; dom-dir:ltr"># Check for pthread_create@GLIBC2.0</p>
<p style="Normal" xid="1225" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for pthread_create@GLIBC2.0()])</p>
<p style="Normal" xid="1226"><c></c></p>
<p style="Normal" xid="1227" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1228" props="text-align:left; dom-dir:ltr">CFLAGS="-lpthread"</p>
<p style="Normal" xid="1229" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="1230" props="text-align:left; dom-dir:ltr">extern int pthread_create_glibc_2_0(void*, const void*,</p>
<p style="Normal" xid="1231" props="text-align:left; dom-dir:ltr">                                    void *(*)(void*), void*);</p>
<p style="Normal" xid="1232" props="text-align:left; dom-dir:ltr">__asm__(".symver pthread_create_glibc_2_0, pthread_create@GLIBC_2.0");</p>
<p style="Normal" xid="1233">]], [[</p>
<p style="Normal" xid="1234" props="text-align:left; dom-dir:ltr">#ifdef __powerpc__</p>
<p style="Normal" xid="1235">/*</p>
<p style="Normal" xid="1236" props="text-align:left; dom-dir:ltr"> * Apparently on PowerPC linking this program succeeds and generates an</p>
<p style="Normal" xid="1237" props="text-align:left; dom-dir:ltr"> * executable with the undefined symbol pthread_create@GLIBC_2.0.</p>
<p style="Normal" xid="1238"> */</p>
<p style="Normal" xid="1239" props="text-align:left; dom-dir:ltr">#error This test does not work properly on PowerPC.</p>
<p style="Normal" xid="1240" props="text-align:left; dom-dir:ltr">#else</p>
<p style="Normal" xid="1241" props="text-align:left; dom-dir:ltr">  pthread_create_glibc_2_0(0, 0, 0, 0);</p>
<p style="Normal" xid="1242" props="text-align:left; dom-dir:ltr">#endif</p>
<p style="Normal" xid="1243" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1244">]])], [</p>
<p style="Normal" xid="1245" props="text-align:left; dom-dir:ltr">ac_have_pthread_create_glibc_2_0=yes</p>
<p style="Normal" xid="1246" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1247" props="text-align:left; dom-dir:ltr">AC_DEFINE([HAVE_PTHREAD_CREATE_GLIBC_2_0], 1,</p>
<p style="Normal" xid="1248" props="text-align:left; dom-dir:ltr">          [Define to 1 if you have the `pthread_create@glibc2.0' function.])</p>
<p style="Normal" xid="1249">], [</p>
<p style="Normal" xid="1250" props="text-align:left; dom-dir:ltr">ac_have_pthread_create_glibc_2_0=no</p>
<p style="Normal" xid="1251" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1252">])</p>
<p style="Normal" xid="1253" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1254"><c></c></p>
<p style="Normal" xid="1255" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(HAVE_PTHREAD_CREATE_GLIBC_2_0,</p>
<p style="Normal" xid="1256" props="text-align:left; dom-dir:ltr">	       test x$ac_have_pthread_create_glibc_2_0 = xyes)</p>
<p style="Normal" xid="1257"><c></c></p>
<p style="Normal" xid="1258"><c></c></p>
<p style="Normal" xid="1259" props="text-align:left; dom-dir:ltr"># Check for eventfd_t, eventfd() and eventfd_read()</p>
<p style="Normal" xid="1260" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for eventfd()])</p>
<p style="Normal" xid="1261"><c></c></p>
<p style="Normal" xid="1262" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="1263" props="text-align:left; dom-dir:ltr">#include &lt;sys/eventfd.h&gt;</p>
<p style="Normal" xid="1264">]], [[</p>
<p style="Normal" xid="1265" props="text-align:left; dom-dir:ltr">  eventfd_t ev;</p>
<p style="Normal" xid="1266" props="text-align:left; dom-dir:ltr">  int fd;</p>
<p style="Normal" xid="1267"><c></c></p>
<p style="Normal" xid="1268" props="text-align:left; dom-dir:ltr">  fd = eventfd(5, 0);</p>
<p style="Normal" xid="1269" props="text-align:left; dom-dir:ltr">  eventfd_read(fd, &amp;ev);</p>
<p style="Normal" xid="1270" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1271">]])], [</p>
<p style="Normal" xid="1272" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1273" props="text-align:left; dom-dir:ltr">AC_DEFINE([HAVE_EVENTFD], 1,</p>
<p style="Normal" xid="1274" props="text-align:left; dom-dir:ltr">          [Define to 1 if you have the `eventfd' function.])</p>
<p style="Normal" xid="1275" props="text-align:left; dom-dir:ltr">AC_DEFINE([HAVE_EVENTFD_READ], 1,</p>
<p style="Normal" xid="1276" props="text-align:left; dom-dir:ltr">          [Define to 1 if you have the `eventfd_read' function.])</p>
<p style="Normal" xid="1277">], [</p>
<p style="Normal" xid="1278" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1279">])</p>
<p style="Normal" xid="1280"><c></c></p>
<p style="Normal" xid="1281"><c></c></p>
<p style="Normal" xid="1282">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="1283" props="text-align:left; dom-dir:ltr"># Checking for supported compiler flags.</p>
<p style="Normal" xid="1284">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="1285"><c></c></p>
<p style="Normal" xid="1286" props="text-align:left; dom-dir:ltr"># does this compiler support -m32 ?</p>
<p style="Normal" xid="1287" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -m32])</p>
<p style="Normal" xid="1288"><c></c></p>
<p style="Normal" xid="1289" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1290" props="text-align:left; dom-dir:ltr">CFLAGS="-m32"</p>
<p style="Normal" xid="1291"><c></c></p>
<p style="Normal" xid="1292" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1293" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1294">]])], [</p>
<p style="Normal" xid="1295" props="text-align:left; dom-dir:ltr">FLAG_M32="-m32"</p>
<p style="Normal" xid="1296" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1297">], [</p>
<p style="Normal" xid="1298" props="text-align:left; dom-dir:ltr">FLAG_M32=""</p>
<p style="Normal" xid="1299" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1300">])</p>
<p style="Normal" xid="1301" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1302"><c></c></p>
<p style="Normal" xid="1303" props="text-align:left; dom-dir:ltr">AC_SUBST(FLAG_M32)</p>
<p style="Normal" xid="1304"><c></c></p>
<p style="Normal" xid="1305"><c></c></p>
<p style="Normal" xid="1306" props="text-align:left; dom-dir:ltr"># does this compiler support -m64 ?</p>
<p style="Normal" xid="1307" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -m64])</p>
<p style="Normal" xid="1308"><c></c></p>
<p style="Normal" xid="1309" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1310" props="text-align:left; dom-dir:ltr">CFLAGS="-m64"</p>
<p style="Normal" xid="1311"><c></c></p>
<p style="Normal" xid="1312" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1313" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1314">]])], [</p>
<p style="Normal" xid="1315" props="text-align:left; dom-dir:ltr">FLAG_M64="-m64"</p>
<p style="Normal" xid="1316" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1317">], [</p>
<p style="Normal" xid="1318" props="text-align:left; dom-dir:ltr">FLAG_M64=""</p>
<p style="Normal" xid="1319" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1320">])</p>
<p style="Normal" xid="1321" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1322"><c></c></p>
<p style="Normal" xid="1323" props="text-align:left; dom-dir:ltr">AC_SUBST(FLAG_M64)</p>
<p style="Normal" xid="1324"><c></c></p>
<p style="Normal" xid="1325"><c></c></p>
<p style="Normal" xid="1326" props="text-align:left; dom-dir:ltr"># does this compiler support -mmmx ?</p>
<p style="Normal" xid="1327" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -mmmx])</p>
<p style="Normal" xid="1328"><c></c></p>
<p style="Normal" xid="1329" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1330" props="text-align:left; dom-dir:ltr">CFLAGS="-mmmx"</p>
<p style="Normal" xid="1331"><c></c></p>
<p style="Normal" xid="1332" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1333" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1334">]])], [</p>
<p style="Normal" xid="1335" props="text-align:left; dom-dir:ltr">FLAG_MMMX="-mmmx"</p>
<p style="Normal" xid="1336" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1337">], [</p>
<p style="Normal" xid="1338" props="text-align:left; dom-dir:ltr">FLAG_MMMX=""</p>
<p style="Normal" xid="1339" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1340">])</p>
<p style="Normal" xid="1341" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1342"><c></c></p>
<p style="Normal" xid="1343" props="text-align:left; dom-dir:ltr">AC_SUBST(FLAG_MMMX)</p>
<p style="Normal" xid="1344"><c></c></p>
<p style="Normal" xid="1345"><c></c></p>
<p style="Normal" xid="1346" props="text-align:left; dom-dir:ltr"># does this compiler support -msse ?</p>
<p style="Normal" xid="1347" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -msse])</p>
<p style="Normal" xid="1348"><c></c></p>
<p style="Normal" xid="1349" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1350" props="text-align:left; dom-dir:ltr">CFLAGS="-msse"</p>
<p style="Normal" xid="1351"><c></c></p>
<p style="Normal" xid="1352" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1353" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1354">]])], [</p>
<p style="Normal" xid="1355" props="text-align:left; dom-dir:ltr">FLAG_MSSE="-msse"</p>
<p style="Normal" xid="1356" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1357">], [</p>
<p style="Normal" xid="1358" props="text-align:left; dom-dir:ltr">FLAG_MSSE=""</p>
<p style="Normal" xid="1359" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1360">])</p>
<p style="Normal" xid="1361" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1362"><c></c></p>
<p style="Normal" xid="1363" props="text-align:left; dom-dir:ltr">AC_SUBST(FLAG_MSSE)</p>
<p style="Normal" xid="1364"><c></c></p>
<p style="Normal" xid="1365"><c></c></p>
<p style="Normal" xid="1366" props="text-align:left; dom-dir:ltr"># does this compiler support -mpreferred-stack-boundary=2 ?</p>
<p style="Normal" xid="1367" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -mpreferred-stack-boundary])</p>
<p style="Normal" xid="1368"><c></c></p>
<p style="Normal" xid="1369" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1370" props="text-align:left; dom-dir:ltr">CFLAGS="-mpreferred-stack-boundary=2"</p>
<p style="Normal" xid="1371"><c></c></p>
<p style="Normal" xid="1372" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1373" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1374">]])], [</p>
<p style="Normal" xid="1375" props="text-align:left; dom-dir:ltr">PREFERRED_STACK_BOUNDARY="-mpreferred-stack-boundary=2"</p>
<p style="Normal" xid="1376" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1377">], [</p>
<p style="Normal" xid="1378" props="text-align:left; dom-dir:ltr">PREFERRED_STACK_BOUNDARY=""</p>
<p style="Normal" xid="1379" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1380">])</p>
<p style="Normal" xid="1381" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1382"><c></c></p>
<p style="Normal" xid="1383" props="text-align:left; dom-dir:ltr">AC_SUBST(PREFERRED_STACK_BOUNDARY)</p>
<p style="Normal" xid="1384"><c></c></p>
<p style="Normal" xid="1385"><c></c></p>
<p style="Normal" xid="1386" props="text-align:left; dom-dir:ltr"># does this compiler support -Wno-pointer-sign ?</p>
<p style="Normal" xid="1387" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -Wno-pointer-sign])</p>
<p style="Normal" xid="1388"><c></c></p>
<p style="Normal" xid="1389" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1390" props="text-align:left; dom-dir:ltr">CFLAGS="-Wno-pointer-sign"</p>
<p style="Normal" xid="1391"><c></c></p>
<p style="Normal" xid="1392" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1393" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1394">]])], [</p>
<p style="Normal" xid="1395" props="text-align:left; dom-dir:ltr">no_pointer_sign=yes</p>
<p style="Normal" xid="1396" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1397">], [</p>
<p style="Normal" xid="1398" props="text-align:left; dom-dir:ltr">no_pointer_sign=no</p>
<p style="Normal" xid="1399" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1400">])</p>
<p style="Normal" xid="1401" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1402"><c></c></p>
<p style="Normal" xid="1403" props="text-align:left; dom-dir:ltr">if test x$no_pointer_sign = xyes; then</p>
<p style="Normal" xid="1404" props="text-align:left; dom-dir:ltr">  CFLAGS="$CFLAGS -Wno-pointer-sign"</p>
<p style="Normal" xid="1405" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="1406"><c></c></p>
<p style="Normal" xid="1407"><c></c></p>
<p style="Normal" xid="1408" props="text-align:left; dom-dir:ltr"># does this compiler support -Wno-empty-body ?</p>
<p style="Normal" xid="1409"><c></c></p>
<p style="Normal" xid="1410" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -Wno-empty-body])</p>
<p style="Normal" xid="1411"><c></c></p>
<p style="Normal" xid="1412" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1413" props="text-align:left; dom-dir:ltr">CFLAGS="-Wno-empty-body"</p>
<p style="Normal" xid="1414"><c></c></p>
<p style="Normal" xid="1415" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[</p>
<p style="Normal" xid="1416" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1417">]])], [</p>
<p style="Normal" xid="1418" props="text-align:left; dom-dir:ltr">AC_SUBST([FLAG_W_NO_EMPTY_BODY], [-Wno-empty-body])</p>
<p style="Normal" xid="1419" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1420">], [</p>
<p style="Normal" xid="1421" props="text-align:left; dom-dir:ltr">AC_SUBST([FLAG_W_NO_EMPTY_BODY], [])</p>
<p style="Normal" xid="1422" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1423">])</p>
<p style="Normal" xid="1424" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1425"><c></c></p>
<p style="Normal" xid="1426"><c></c></p>
<p style="Normal" xid="1427" props="text-align:left; dom-dir:ltr"># does this compiler support -Wno-format-zero-length ?</p>
<p style="Normal" xid="1428"><c></c></p>
<p style="Normal" xid="1429" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -Wno-format-zero-length])</p>
<p style="Normal" xid="1430"><c></c></p>
<p style="Normal" xid="1431" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1432" props="text-align:left; dom-dir:ltr">CFLAGS="-Wno-format-zero-length"</p>
<p style="Normal" xid="1433"><c></c></p>
<p style="Normal" xid="1434" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[</p>
<p style="Normal" xid="1435" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1436">]])], [</p>
<p style="Normal" xid="1437" props="text-align:left; dom-dir:ltr">AC_SUBST([FLAG_W_NO_FORMAT_ZERO_LENGTH], [-Wno-format-zero-length])</p>
<p style="Normal" xid="1438" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1439">], [</p>
<p style="Normal" xid="1440" props="text-align:left; dom-dir:ltr">AC_SUBST([FLAG_W_NO_FORMAT_ZERO_LENGTH], [])</p>
<p style="Normal" xid="1441" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1442">])</p>
<p style="Normal" xid="1443" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1444"><c></c></p>
<p style="Normal" xid="1445"><c></c></p>
<p style="Normal" xid="1446" props="text-align:left; dom-dir:ltr"># does this compiler support -Wno-nonnull ?</p>
<p style="Normal" xid="1447"><c></c></p>
<p style="Normal" xid="1448" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -Wno-nonnull])</p>
<p style="Normal" xid="1449"><c></c></p>
<p style="Normal" xid="1450" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1451" props="text-align:left; dom-dir:ltr">CFLAGS="-Wno-nonnull"</p>
<p style="Normal" xid="1452"><c></c></p>
<p style="Normal" xid="1453" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[</p>
<p style="Normal" xid="1454" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1455">]])], [</p>
<p style="Normal" xid="1456" props="text-align:left; dom-dir:ltr">AC_SUBST([FLAG_W_NO_NONNULL], [-Wno-nonnull])</p>
<p style="Normal" xid="1457" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1458">], [</p>
<p style="Normal" xid="1459" props="text-align:left; dom-dir:ltr">AC_SUBST([FLAG_W_NO_NONNULL], [])</p>
<p style="Normal" xid="1460" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1461">])</p>
<p style="Normal" xid="1462" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1463"><c></c></p>
<p style="Normal" xid="1464"><c></c></p>
<p style="Normal" xid="1465" props="text-align:left; dom-dir:ltr"># does this compiler support -Wno-overflow ?</p>
<p style="Normal" xid="1466"><c></c></p>
<p style="Normal" xid="1467" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -Wno-overflow])</p>
<p style="Normal" xid="1468"><c></c></p>
<p style="Normal" xid="1469" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1470" props="text-align:left; dom-dir:ltr">CFLAGS="-Wno-overflow"</p>
<p style="Normal" xid="1471"><c></c></p>
<p style="Normal" xid="1472" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[</p>
<p style="Normal" xid="1473" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1474">]])], [</p>
<p style="Normal" xid="1475" props="text-align:left; dom-dir:ltr">AC_SUBST([FLAG_W_NO_OVERFLOW], [-Wno-overflow])</p>
<p style="Normal" xid="1476" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1477">], [</p>
<p style="Normal" xid="1478" props="text-align:left; dom-dir:ltr">AC_SUBST([FLAG_W_NO_OVERFLOW], [])</p>
<p style="Normal" xid="1479" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1480">])</p>
<p style="Normal" xid="1481" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1482"><c></c></p>
<p style="Normal" xid="1483"><c></c></p>
<p style="Normal" xid="1484" props="text-align:left; dom-dir:ltr"># does this compiler support -Wno-uninitialized ?</p>
<p style="Normal" xid="1485"><c></c></p>
<p style="Normal" xid="1486" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -Wno-uninitialized])</p>
<p style="Normal" xid="1487"><c></c></p>
<p style="Normal" xid="1488" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1489" props="text-align:left; dom-dir:ltr">CFLAGS="-Wno-uninitialized"</p>
<p style="Normal" xid="1490"><c></c></p>
<p style="Normal" xid="1491" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[</p>
<p style="Normal" xid="1492" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1493">]])], [</p>
<p style="Normal" xid="1494" props="text-align:left; dom-dir:ltr">AC_SUBST([FLAG_W_NO_UNINITIALIZED], [-Wno-uninitialized])</p>
<p style="Normal" xid="1495" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1496">], [</p>
<p style="Normal" xid="1497" props="text-align:left; dom-dir:ltr">AC_SUBST([FLAG_W_NO_UNINITIALIZED], [])</p>
<p style="Normal" xid="1498" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1499">])</p>
<p style="Normal" xid="1500" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1501"><c></c></p>
<p style="Normal" xid="1502"><c></c></p>
<p style="Normal" xid="1503" props="text-align:left; dom-dir:ltr"># does this compiler support -Wextra or the older -W ?</p>
<p style="Normal" xid="1504"><c></c></p>
<p style="Normal" xid="1505" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -Wextra or -W])</p>
<p style="Normal" xid="1506"><c></c></p>
<p style="Normal" xid="1507" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1508" props="text-align:left; dom-dir:ltr">CFLAGS="-Wextra"</p>
<p style="Normal" xid="1509"><c></c></p>
<p style="Normal" xid="1510" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[</p>
<p style="Normal" xid="1511" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1512">]])], [</p>
<p style="Normal" xid="1513" props="text-align:left; dom-dir:ltr">AC_SUBST([FLAG_W_EXTRA], [-Wextra])</p>
<p style="Normal" xid="1514" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([-Wextra])</p>
<p style="Normal" xid="1515">], [</p>
<p style="Normal" xid="1516" props="text-align:left; dom-dir:ltr">  CFLAGS="-W"</p>
<p style="Normal" xid="1517" props="text-align:left; dom-dir:ltr">  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[</p>
<p style="Normal" xid="1518" props="text-align:left; dom-dir:ltr">    return 0;</p>
<p style="Normal" xid="1519">  ]])], [</p>
<p style="Normal" xid="1520" props="text-align:left; dom-dir:ltr">  AC_SUBST([FLAG_W_EXTRA], [-W])</p>
<p style="Normal" xid="1521" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([-W])</p>
<p style="Normal" xid="1522">  ], [</p>
<p style="Normal" xid="1523" props="text-align:left; dom-dir:ltr">  AC_SUBST([FLAG_W_EXTRA], [])</p>
<p style="Normal" xid="1524" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([not supported])</p>
<p style="Normal" xid="1525">  ])</p>
<p style="Normal" xid="1526">])</p>
<p style="Normal" xid="1527" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1528"><c></c></p>
<p style="Normal" xid="1529"><c></c></p>
<p style="Normal" xid="1530" props="text-align:left; dom-dir:ltr"># does this compiler support -fno-stack-protector ?</p>
<p style="Normal" xid="1531" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -fno-stack-protector])</p>
<p style="Normal" xid="1532"><c></c></p>
<p style="Normal" xid="1533" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1534" props="text-align:left; dom-dir:ltr">CFLAGS="-fno-stack-protector"</p>
<p style="Normal" xid="1535"><c></c></p>
<p style="Normal" xid="1536" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1537" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1538">]])], [</p>
<p style="Normal" xid="1539" props="text-align:left; dom-dir:ltr">no_stack_protector=yes</p>
<p style="Normal" xid="1540" props="text-align:left; dom-dir:ltr">FLAG_FNO_STACK_PROTECTOR="-fno-stack-protector"</p>
<p style="Normal" xid="1541" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1542">], [</p>
<p style="Normal" xid="1543" props="text-align:left; dom-dir:ltr">no_stack_protector=no</p>
<p style="Normal" xid="1544" props="text-align:left; dom-dir:ltr">FLAG_FNO_STACK_PROTECTOR=""</p>
<p style="Normal" xid="1545" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1546">])</p>
<p style="Normal" xid="1547" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1548"><c></c></p>
<p style="Normal" xid="1549" props="text-align:left; dom-dir:ltr">AC_SUBST(FLAG_FNO_STACK_PROTECTOR)</p>
<p style="Normal" xid="1550"><c></c></p>
<p style="Normal" xid="1551" props="text-align:left; dom-dir:ltr">if test x$no_stack_protector = xyes; then</p>
<p style="Normal" xid="1552" props="text-align:left; dom-dir:ltr">  CFLAGS="$CFLAGS -fno-stack-protector"</p>
<p style="Normal" xid="1553" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="1554"><c></c></p>
<p style="Normal" xid="1555"><c></c></p>
<p style="Normal" xid="1556" props="text-align:left; dom-dir:ltr"># does this compiler support --param inline-unit-growth=... ?</p>
<p style="Normal" xid="1557"><c></c></p>
<p style="Normal" xid="1558" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts --param inline-unit-growth])</p>
<p style="Normal" xid="1559"><c></c></p>
<p style="Normal" xid="1560" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1561" props="text-align:left; dom-dir:ltr">CFLAGS="--param inline-unit-growth=900"</p>
<p style="Normal" xid="1562"><c></c></p>
<p style="Normal" xid="1563" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[</p>
<p style="Normal" xid="1564" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1565">]])], [</p>
<p style="Normal" xid="1566" props="text-align:left; dom-dir:ltr">AC_SUBST([FLAG_UNLIMITED_INLINE_UNIT_GROWTH],</p>
<p style="Normal" xid="1567" props="text-align:left; dom-dir:ltr">         ["--param inline-unit-growth=900"])</p>
<p style="Normal" xid="1568" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1569">], [</p>
<p style="Normal" xid="1570" props="text-align:left; dom-dir:ltr">AC_SUBST([FLAG_UNLIMITED_INLINE_UNIT_GROWTH], [""])</p>
<p style="Normal" xid="1571" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1572">])</p>
<p style="Normal" xid="1573" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1574"><c></c></p>
<p style="Normal" xid="1575"><c></c></p>
<p style="Normal" xid="1576" props="text-align:left; dom-dir:ltr"># does this compiler support -gdwarf-4 -fdebug-types-section ?</p>
<p style="Normal" xid="1577"><c></c></p>
<p style="Normal" xid="1578" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc accepts -gdwarf-4 -fdebug-types-section])</p>
<p style="Normal" xid="1579"><c></c></p>
<p style="Normal" xid="1580" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1581" props="text-align:left; dom-dir:ltr">CFLAGS="-gdwarf-4 -fdebug-types-section"</p>
<p style="Normal" xid="1582"><c></c></p>
<p style="Normal" xid="1583" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[</p>
<p style="Normal" xid="1584" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="1585">]])], [</p>
<p style="Normal" xid="1586" props="text-align:left; dom-dir:ltr">ac_have_dwarf4=yes</p>
<p style="Normal" xid="1587" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1588">], [</p>
<p style="Normal" xid="1589" props="text-align:left; dom-dir:ltr">ac_have_dwarf4=no</p>
<p style="Normal" xid="1590" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1591">])</p>
<p style="Normal" xid="1592" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(DWARF4, test x$ac_have_dwarf4 = xyes)</p>
<p style="Normal" xid="1593" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1594"><c></c></p>
<p style="Normal" xid="1595"><c></c></p>
<p style="Normal" xid="1596" props="text-align:left; dom-dir:ltr"># does the linker support -Wl,--build-id=none ?  Note, it's</p>
<p style="Normal" xid="1597" props="text-align:left; dom-dir:ltr"># important that we test indirectly via whichever C compiler</p>
<p style="Normal" xid="1598" props="text-align:left; dom-dir:ltr"># is selected, rather than testing /usr/bin/ld or whatever</p>
<p style="Normal" xid="1599" props="text-align:left; dom-dir:ltr"># directly.</p>
<p style="Normal" xid="1600"><c></c></p>
<p style="Normal" xid="1601" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if the linker accepts -Wl,--build-id=none])</p>
<p style="Normal" xid="1602"><c></c></p>
<p style="Normal" xid="1603" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="1604" props="text-align:left; dom-dir:ltr">CFLAGS="-Wl,--build-id=none"</p>
<p style="Normal" xid="1605"><c></c></p>
<p style="Normal" xid="1606" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE(</p>
<p style="Normal" xid="1607" props="text-align:left; dom-dir:ltr">[AC_LANG_PROGRAM([ ], [return 0;])],</p>
<p style="Normal" xid="1608">[</p>
<p style="Normal" xid="1609" props="text-align:left; dom-dir:ltr">  AC_SUBST([FLAG_NO_BUILD_ID], ["-Wl,--build-id=none"])</p>
<p style="Normal" xid="1610" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1611">], [</p>
<p style="Normal" xid="1612" props="text-align:left; dom-dir:ltr">  AC_SUBST([FLAG_NO_BUILD_ID], [""])</p>
<p style="Normal" xid="1613" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1614">])</p>
<p style="Normal" xid="1615" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1616"><c></c></p>
<p style="Normal" xid="1617"><c></c></p>
<p style="Normal" xid="1618" props="text-align:left; dom-dir:ltr"># does the ppc assembler support "mtocrf" et al?</p>
<p style="Normal" xid="1619" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if ppc32/64 as supports mtocrf/mfocrf])</p>
<p style="Normal" xid="1620"><c></c></p>
<p style="Normal" xid="1621" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1622" props="text-align:left; dom-dir:ltr">__asm__ __volatile__("mtocrf 4,0");</p>
<p style="Normal" xid="1623" props="text-align:left; dom-dir:ltr">__asm__ __volatile__("mfocrf 0,4");</p>
<p style="Normal" xid="1624">]])], [</p>
<p style="Normal" xid="1625" props="text-align:left; dom-dir:ltr">ac_have_as_ppc_mftocrf=yes</p>
<p style="Normal" xid="1626" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1627">], [</p>
<p style="Normal" xid="1628" props="text-align:left; dom-dir:ltr">ac_have_as_ppc_mftocrf=no</p>
<p style="Normal" xid="1629" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1630">])</p>
<p style="Normal" xid="1631" props="text-align:left; dom-dir:ltr">if test x$ac_have_as_ppc_mftocrf = xyes ; then</p>
<p style="Normal" xid="1632" props="text-align:left; dom-dir:ltr">  AC_DEFINE(HAVE_AS_PPC_MFTOCRF, 1, [Define to 1 if as supports mtocrf/mfocrf.])</p>
<p style="Normal" xid="1633" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="1634"><c></c></p>
<p style="Normal" xid="1635"><c></c></p>
<p style="Normal" xid="1636" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="1637"><c></c></p>
<p style="Normal" xid="1638" props="text-align:left; dom-dir:ltr"># does the x86/amd64 assembler understand SSE3 instructions?</p>
<p style="Normal" xid="1639" props="text-align:left; dom-dir:ltr"># Note, this doesn't generate a C-level symbol.  It generates a</p>
<p style="Normal" xid="1640" props="text-align:left; dom-dir:ltr"># automake-level symbol (BUILD_SSE3_TESTS), used in test Makefile.am's</p>
<p style="Normal" xid="1641" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if x86/amd64 assembler speaks SSE3])</p>
<p style="Normal" xid="1642"><c></c></p>
<p style="Normal" xid="1643" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1644" props="text-align:left; dom-dir:ltr">  do { long long int x; </p>
<p style="Normal" xid="1645" props="text-align:left; dom-dir:ltr">     __asm__ __volatile__("fisttpq (%0)" : :"r"(&amp;x) ); } </p>
<p style="Normal" xid="1646" props="text-align:left; dom-dir:ltr">  while (0)</p>
<p style="Normal" xid="1647">]])], [</p>
<p style="Normal" xid="1648" props="text-align:left; dom-dir:ltr">ac_have_as_sse3=yes</p>
<p style="Normal" xid="1649" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1650">], [</p>
<p style="Normal" xid="1651" props="text-align:left; dom-dir:ltr">ac_have_as_sse3=no</p>
<p style="Normal" xid="1652" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1653">])</p>
<p style="Normal" xid="1654"><c></c></p>
<p style="Normal" xid="1655" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(BUILD_SSE3_TESTS, test x$ac_have_as_sse3 = xyes)</p>
<p style="Normal" xid="1656"><c></c></p>
<p style="Normal" xid="1657"><c></c></p>
<p style="Normal" xid="1658" props="text-align:left; dom-dir:ltr"># Ditto for SSSE3 instructions (note extra S)</p>
<p style="Normal" xid="1659" props="text-align:left; dom-dir:ltr"># Note, this doesn't generate a C-level symbol.  It generates a</p>
<p style="Normal" xid="1660" props="text-align:left; dom-dir:ltr"># automake-level symbol (BUILD_SSSE3_TESTS), used in test Makefile.am's</p>
<p style="Normal" xid="1661" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if x86/amd64 assembler speaks SSSE3])</p>
<p style="Normal" xid="1662"><c></c></p>
<p style="Normal" xid="1663" props="text-align:left; dom-dir:ltr">save_CFLAGS="$CFLAGS"</p>
<p style="Normal" xid="1664" props="text-align:left; dom-dir:ltr">CFLAGS="$CFLAGS -msse"</p>
<p style="Normal" xid="1665" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1666" props="text-align:left; dom-dir:ltr">  do { long long int x; </p>
<p style="Normal" xid="1667" props="text-align:left; dom-dir:ltr">   __asm__ __volatile__(</p>
<p style="Normal" xid="1668" props="text-align:left; dom-dir:ltr">      "pabsb (%0),%%xmm7" : : "r"(&amp;x) : "xmm7" ); }</p>
<p style="Normal" xid="1669" props="text-align:left; dom-dir:ltr">  while (0)</p>
<p style="Normal" xid="1670">]])], [</p>
<p style="Normal" xid="1671" props="text-align:left; dom-dir:ltr">ac_have_as_ssse3=yes</p>
<p style="Normal" xid="1672" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1673">], [</p>
<p style="Normal" xid="1674" props="text-align:left; dom-dir:ltr">ac_have_as_ssse3=no</p>
<p style="Normal" xid="1675" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1676">])</p>
<p style="Normal" xid="1677" props="text-align:left; dom-dir:ltr">CFLAGS="$save_CFLAGS"</p>
<p style="Normal" xid="1678"><c></c></p>
<p style="Normal" xid="1679" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(BUILD_SSSE3_TESTS, test x$ac_have_as_ssse3 = xyes)</p>
<p style="Normal" xid="1680"><c></c></p>
<p style="Normal" xid="1681"><c></c></p>
<p style="Normal" xid="1682" props="text-align:left; dom-dir:ltr"># does the x86/amd64 assembler understand the PCLMULQDQ instruction?</p>
<p style="Normal" xid="1683" props="text-align:left; dom-dir:ltr"># Note, this doesn't generate a C-level symbol.  It generates a</p>
<p style="Normal" xid="1684" props="text-align:left; dom-dir:ltr"># automake-level symbol (BUILD_PCLMULQDQ_TESTS), used in test Makefile.am's</p>
<p style="Normal" xid="1685" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if x86/amd64 assembler supports 'pclmulqdq'])</p>
<p style="Normal" xid="1686" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1687" props="text-align:left; dom-dir:ltr">  do {</p>
<p style="Normal" xid="1688" props="text-align:left; dom-dir:ltr">   __asm__ __volatile__(</p>
<p style="Normal" xid="1689" props="text-align:left; dom-dir:ltr">      "pclmulqdq \$17,%%xmm6,%%xmm7" : : : "xmm6", "xmm7" ); }</p>
<p style="Normal" xid="1690" props="text-align:left; dom-dir:ltr">  while (0)</p>
<p style="Normal" xid="1691">]])], [</p>
<p style="Normal" xid="1692" props="text-align:left; dom-dir:ltr">ac_have_as_pclmulqdq=yes</p>
<p style="Normal" xid="1693" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1694">], [</p>
<p style="Normal" xid="1695" props="text-align:left; dom-dir:ltr">ac_have_as_pclmulqdq=no</p>
<p style="Normal" xid="1696" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1697">])</p>
<p style="Normal" xid="1698"><c></c></p>
<p style="Normal" xid="1699" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(BUILD_PCLMULQDQ_TESTS, test x$ac_have_as_pclmulqdq = xyes)</p>
<p style="Normal" xid="1700"><c></c></p>
<p style="Normal" xid="1701"><c></c></p>
<p style="Normal" xid="1702" props="text-align:left; dom-dir:ltr"># does the x86/amd64 assembler understand the VPCLMULQDQ instruction?</p>
<p style="Normal" xid="1703" props="text-align:left; dom-dir:ltr"># Note, this doesn't generate a C-level symbol.  It generates a</p>
<p style="Normal" xid="1704" props="text-align:left; dom-dir:ltr"># automake-level symbol (BUILD_VPCLMULQDQ_TESTS), used in test Makefile.am's</p>
<p style="Normal" xid="1705" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if x86/amd64 assembler supports 'vpclmulqdq'])</p>
<p style="Normal" xid="1706" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1707" props="text-align:left; dom-dir:ltr">  do {</p>
<p style="Normal" xid="1708">      /*</p>
<p style="Normal" xid="1709" props="text-align:left; dom-dir:ltr">       * Carry-less multiplication of xmm1 with xmm2 and store the result in</p>
<p style="Normal" xid="1710" props="text-align:left; dom-dir:ltr">       * xmm3. The immediate is used to determine which quadwords of xmm1 and</p>
<p style="Normal" xid="1711" props="text-align:left; dom-dir:ltr">       * xmm2 should be used.</p>
<p style="Normal" xid="1712">       */</p>
<p style="Normal" xid="1713" props="text-align:left; dom-dir:ltr">   __asm__ __volatile__(</p>
<p style="Normal" xid="1714" props="text-align:left; dom-dir:ltr">      "vpclmulqdq \$0,%%xmm1,%%xmm2,%%xmm3" : : : );</p>
<p style="Normal" xid="1715" props="text-align:left; dom-dir:ltr">  } while (0)</p>
<p style="Normal" xid="1716">]])], [</p>
<p style="Normal" xid="1717" props="text-align:left; dom-dir:ltr">ac_have_as_vpclmulqdq=yes</p>
<p style="Normal" xid="1718" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1719">], [</p>
<p style="Normal" xid="1720" props="text-align:left; dom-dir:ltr">ac_have_as_vpclmulqdq=no</p>
<p style="Normal" xid="1721" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1722">])</p>
<p style="Normal" xid="1723"><c></c></p>
<p style="Normal" xid="1724" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(BUILD_VPCLMULQDQ_TESTS, test x$ac_have_as_vpclmulqdq = xyes)</p>
<p style="Normal" xid="1725"><c></c></p>
<p style="Normal" xid="1726"><c></c></p>
<p style="Normal" xid="1727" props="text-align:left; dom-dir:ltr"># does the x86/amd64 assembler understand the LZCNT instruction?</p>
<p style="Normal" xid="1728" props="text-align:left; dom-dir:ltr"># Note, this doesn't generate a C-level symbol.  It generates a</p>
<p style="Normal" xid="1729" props="text-align:left; dom-dir:ltr"># automake-level symbol (BUILD_LZCNT_TESTS), used in test Makefile.am's</p>
<p style="Normal" xid="1730" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if x86/amd64 assembler supports 'lzcnt'])</p>
<p style="Normal" xid="1731"><c></c></p>
<p style="Normal" xid="1732" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1733" props="text-align:left; dom-dir:ltr">  do { 		 </p>
<p style="Normal" xid="1734" props="text-align:left; dom-dir:ltr">      __asm__ __volatile__("lzcnt %%rax,%%rax" : : : "rax");</p>
<p style="Normal" xid="1735" props="text-align:left; dom-dir:ltr">  } while (0)</p>
<p style="Normal" xid="1736">]])], [</p>
<p style="Normal" xid="1737" props="text-align:left; dom-dir:ltr">  ac_have_as_lzcnt=yes</p>
<p style="Normal" xid="1738" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1739">], [</p>
<p style="Normal" xid="1740" props="text-align:left; dom-dir:ltr">  ac_have_as_lzcnt=no</p>
<p style="Normal" xid="1741" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1742">])</p>
<p style="Normal" xid="1743"><c></c></p>
<p style="Normal" xid="1744" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([BUILD_LZCNT_TESTS], [test x$ac_have_as_lzcnt = xyes])</p>
<p style="Normal" xid="1745"><c></c></p>
<p style="Normal" xid="1746"><c></c></p>
<p style="Normal" xid="1747" props="text-align:left; dom-dir:ltr"># does the x86/amd64 assembler understand SSE 4.2 instructions?</p>
<p style="Normal" xid="1748" props="text-align:left; dom-dir:ltr"># Note, this doesn't generate a C-level symbol.  It generates a</p>
<p style="Normal" xid="1749" props="text-align:left; dom-dir:ltr"># automake-level symbol (BUILD_SSE42_TESTS), used in test Makefile.am's</p>
<p style="Normal" xid="1750" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if x86/amd64 assembler speaks SSE4.2])</p>
<p style="Normal" xid="1751"><c></c></p>
<p style="Normal" xid="1752" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1753" props="text-align:left; dom-dir:ltr">  do { long long int x; </p>
<p style="Normal" xid="1754" props="text-align:left; dom-dir:ltr">   __asm__ __volatile__(</p>
<p style="Normal" xid="1755" props="text-align:left; dom-dir:ltr">      "crc32q %%r15,%%r15" : : : "r15" );</p>
<p style="Normal" xid="1756" props="text-align:left; dom-dir:ltr">   __asm__ __volatile__(</p>
<p style="Normal" xid="1757" props="text-align:left; dom-dir:ltr">      "pblendvb (%%rcx), %%xmm11" : : : "memory", "xmm11"); </p>
<p style="Normal" xid="1758" props="text-align:left; dom-dir:ltr">   __asm__ __volatile__(</p>
<p style="Normal" xid="1759" props="text-align:left; dom-dir:ltr">      "aesdec %%xmm2, %%xmm1" : : : "xmm2", "xmm1"); }</p>
<p style="Normal" xid="1760" props="text-align:left; dom-dir:ltr">  while (0)</p>
<p style="Normal" xid="1761">]])], [</p>
<p style="Normal" xid="1762" props="text-align:left; dom-dir:ltr">ac_have_as_sse42=yes</p>
<p style="Normal" xid="1763" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1764">], [</p>
<p style="Normal" xid="1765" props="text-align:left; dom-dir:ltr">ac_have_as_sse42=no</p>
<p style="Normal" xid="1766" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1767">])</p>
<p style="Normal" xid="1768"><c></c></p>
<p style="Normal" xid="1769" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(BUILD_SSE42_TESTS, test x$ac_have_as_sse42 = xyes)</p>
<p style="Normal" xid="1770"><c></c></p>
<p style="Normal" xid="1771"><c></c></p>
<p style="Normal" xid="1772" props="text-align:left; dom-dir:ltr"># does the x86/amd64 assembler understand AVX instructions?</p>
<p style="Normal" xid="1773" props="text-align:left; dom-dir:ltr"># Note, this doesn't generate a C-level symbol.  It generates a</p>
<p style="Normal" xid="1774" props="text-align:left; dom-dir:ltr"># automake-level symbol (BUILD_AVX_TESTS), used in test Makefile.am's</p>
<p style="Normal" xid="1775" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if x86/amd64 assembler speaks AVX])</p>
<p style="Normal" xid="1776"><c></c></p>
<p style="Normal" xid="1777" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1778" props="text-align:left; dom-dir:ltr">  do { long long int x; </p>
<p style="Normal" xid="1779" props="text-align:left; dom-dir:ltr">   __asm__ __volatile__(</p>
<p style="Normal" xid="1780" props="text-align:left; dom-dir:ltr">      "vmovupd (%%rsp), %%ymm7" : : : "xmm7" );</p>
<p style="Normal" xid="1781" props="text-align:left; dom-dir:ltr">   __asm__ __volatile__(</p>
<p style="Normal" xid="1782" props="text-align:left; dom-dir:ltr">      "vaddpd %%ymm6,%%ymm7,%%ymm8" : : : "xmm6","xmm7","xmm8"); }</p>
<p style="Normal" xid="1783" props="text-align:left; dom-dir:ltr">  while (0)</p>
<p style="Normal" xid="1784">]])], [</p>
<p style="Normal" xid="1785" props="text-align:left; dom-dir:ltr">ac_have_as_avx=yes</p>
<p style="Normal" xid="1786" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1787">], [</p>
<p style="Normal" xid="1788" props="text-align:left; dom-dir:ltr">ac_have_as_avx=no</p>
<p style="Normal" xid="1789" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1790">])</p>
<p style="Normal" xid="1791"><c></c></p>
<p style="Normal" xid="1792" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(BUILD_AVX_TESTS, test x$ac_have_as_avx = xyes)</p>
<p style="Normal" xid="1793"><c></c></p>
<p style="Normal" xid="1794"><c></c></p>
<p style="Normal" xid="1795" props="text-align:left; dom-dir:ltr"># does the x86/amd64 assembler understand MOVBE?</p>
<p style="Normal" xid="1796" props="text-align:left; dom-dir:ltr"># Note, this doesn't generate a C-level symbol.  It generates a</p>
<p style="Normal" xid="1797" props="text-align:left; dom-dir:ltr"># automake-level symbol (BUILD_MOVBE_TESTS), used in test Makefile.am's</p>
<p style="Normal" xid="1798" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if x86/amd64 assembler knows the MOVBE insn])</p>
<p style="Normal" xid="1799"><c></c></p>
<p style="Normal" xid="1800" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="1801" props="text-align:left; dom-dir:ltr">  do { long long int x; </p>
<p style="Normal" xid="1802" props="text-align:left; dom-dir:ltr">   __asm__ __volatile__(</p>
<p style="Normal" xid="1803" props="text-align:left; dom-dir:ltr">      "movbe (%%rsp), %%r15" : : : "memory", "r15" ); }</p>
<p style="Normal" xid="1804" props="text-align:left; dom-dir:ltr">  while (0)</p>
<p style="Normal" xid="1805">]])], [</p>
<p style="Normal" xid="1806" props="text-align:left; dom-dir:ltr">ac_have_as_movbe=yes</p>
<p style="Normal" xid="1807" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1808">], [</p>
<p style="Normal" xid="1809" props="text-align:left; dom-dir:ltr">ac_have_as_movbe=no</p>
<p style="Normal" xid="1810" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1811">])</p>
<p style="Normal" xid="1812"><c></c></p>
<p style="Normal" xid="1813" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(BUILD_MOVBE_TESTS, test x$ac_have_as_movbe = xyes)</p>
<p style="Normal" xid="1814"><c></c></p>
<p style="Normal" xid="1815"><c></c></p>
<p style="Normal" xid="1816" props="text-align:left; dom-dir:ltr"># Does the C compiler support the "ifunc" attribute</p>
<p style="Normal" xid="1817" props="text-align:left; dom-dir:ltr"># Note, this doesn't generate a C-level symbol.  It generates a</p>
<p style="Normal" xid="1818" props="text-align:left; dom-dir:ltr"># automake-level symbol (BUILD_IFUNC_TESTS), used in test Makefile.am's</p>
<p style="Normal" xid="1819" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc supports the ifunc attribute])</p>
<p style="Normal" xid="1820"><c></c></p>
<p style="Normal" xid="1821" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_SOURCE([[</p>
<p style="Normal" xid="1822" props="text-align:left; dom-dir:ltr">static void mytest(void) {}</p>
<p style="Normal" xid="1823"><c></c></p>
<p style="Normal" xid="1824" props="text-align:left; dom-dir:ltr">static void (*resolve_test(void))(void)</p>
<p style="Normal" xid="1825">{</p>
<p style="Normal" xid="1826" props="text-align:left; dom-dir:ltr">    return (void (*)(void))&amp;mytest;</p>
<p style="Normal" xid="1827">}</p>
<p style="Normal" xid="1828"><c></c></p>
<p style="Normal" xid="1829" props="text-align:left; dom-dir:ltr">void test(void) __attribute__((ifunc("resolve_test")));</p>
<p style="Normal" xid="1830"><c></c></p>
<p style="Normal" xid="1831" props="text-align:left; dom-dir:ltr">int main()</p>
<p style="Normal" xid="1832">{</p>
<p style="Normal" xid="1833" props="text-align:left; dom-dir:ltr">    test();</p>
<p style="Normal" xid="1834" props="text-align:left; dom-dir:ltr">    return 0;</p>
<p style="Normal" xid="1835">}</p>
<p style="Normal" xid="1836">]])], [</p>
<p style="Normal" xid="1837" props="text-align:left; dom-dir:ltr">ac_have_ifunc_attr=yes</p>
<p style="Normal" xid="1838" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1839">], [</p>
<p style="Normal" xid="1840" props="text-align:left; dom-dir:ltr">ac_have_ifunc_attr=no</p>
<p style="Normal" xid="1841" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1842">])</p>
<p style="Normal" xid="1843"><c></c></p>
<p style="Normal" xid="1844" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(BUILD_IFUNC_TESTS, test x$ac_have_ifunc_attr = xyes)</p>
<p style="Normal" xid="1845"><c></c></p>
<p style="Normal" xid="1846"><c></c></p>
<p style="Normal" xid="1847" props="text-align:left; dom-dir:ltr"># XXX JRS 2010 Oct 13: what is this for?  For sure, we don't need this</p>
<p style="Normal" xid="1848" props="text-align:left; dom-dir:ltr"># when building the tool executables.  I think we should get rid of it.</p>
<p style="Normal" xid="1849">#</p>
<p style="Normal" xid="1850" props="text-align:left; dom-dir:ltr"># Check for TLS support in the compiler and linker</p>
<p style="Normal" xid="1851" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_PROGRAM([[static __thread int foo;]],</p>
<p style="Normal" xid="1852" props="text-align:left; dom-dir:ltr">                                [[return foo;]])],</p>
<p style="Normal" xid="1853" props="text-align:left; dom-dir:ltr">                               [vg_cv_linktime_tls=yes],</p>
<p style="Normal" xid="1854" props="text-align:left; dom-dir:ltr">                               [vg_cv_linktime_tls=no])</p>
<p style="Normal" xid="1855" props="text-align:left; dom-dir:ltr"># Native compilation: check whether running a program using TLS succeeds.</p>
<p style="Normal" xid="1856" props="text-align:left; dom-dir:ltr"># Linking only is not sufficient -- e.g. on Red Hat 7.3 linking TLS programs</p>
<p style="Normal" xid="1857" props="text-align:left; dom-dir:ltr"># succeeds but running programs using TLS fails.</p>
<p style="Normal" xid="1858" props="text-align:left; dom-dir:ltr"># Cross-compiling: check whether linking a program using TLS succeeds.</p>
<p style="Normal" xid="1859" props="text-align:left; dom-dir:ltr">AC_CACHE_CHECK([for TLS support], vg_cv_tls,</p>
<p style="Normal" xid="1860" props="text-align:left; dom-dir:ltr">	       [AC_ARG_ENABLE(tls, [  --enable-tls            platform supports TLS],</p>
<p style="Normal" xid="1861" props="text-align:left; dom-dir:ltr">		[vg_cv_tls=$enableval],</p>
<p style="Normal" xid="1862" props="text-align:left; dom-dir:ltr">               	[AC_RUN_IFELSE([AC_LANG_PROGRAM([[static __thread int foo;]],</p>
<p style="Normal" xid="1863" props="text-align:left; dom-dir:ltr">                                                [[return foo;]])],</p>
<p style="Normal" xid="1864" props="text-align:left; dom-dir:ltr">                               [vg_cv_tls=yes],</p>
<p style="Normal" xid="1865" props="text-align:left; dom-dir:ltr">                               [vg_cv_tls=no],</p>
<p style="Normal" xid="1866" props="text-align:left; dom-dir:ltr">                               [vg_cv_tls=$vg_cv_linktime_tls])])])</p>
<p style="Normal" xid="1867"><c></c></p>
<p style="Normal" xid="1868" props="text-align:left; dom-dir:ltr">if test "$vg_cv_tls" = yes; then</p>
<p style="Normal" xid="1869" props="text-align:left; dom-dir:ltr">AC_DEFINE([HAVE_TLS], 1, [can use __thread to define thread-local variables])</p>
<p style="Normal" xid="1870" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="1871"><c></c></p>
<p style="Normal" xid="1872"><c></c></p>
<p style="Normal" xid="1873">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="1874" props="text-align:left; dom-dir:ltr"># Checks for C header files.</p>
<p style="Normal" xid="1875">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="1876"><c></c></p>
<p style="Normal" xid="1877" props="text-align:left; dom-dir:ltr">AC_HEADER_STDC</p>
<p style="Normal" xid="1878" props="text-align:left; dom-dir:ltr">AC_CHECK_HEADERS([       \</p>
<p style="Normal" xid="1879" props="text-align:left; dom-dir:ltr">        asm/unistd.h     \</p>
<p style="Normal" xid="1880" props="text-align:left; dom-dir:ltr">        endian.h         \</p>
<p style="Normal" xid="1881" props="text-align:left; dom-dir:ltr">        mqueue.h         \</p>
<p style="Normal" xid="1882" props="text-align:left; dom-dir:ltr">        sys/endian.h     \</p>
<p style="Normal" xid="1883" props="text-align:left; dom-dir:ltr">        sys/epoll.h      \</p>
<p style="Normal" xid="1884" props="text-align:left; dom-dir:ltr">        sys/eventfd.h    \</p>
<p style="Normal" xid="1885" props="text-align:left; dom-dir:ltr">        sys/klog.h       \</p>
<p style="Normal" xid="1886" props="text-align:left; dom-dir:ltr">        sys/poll.h       \</p>
<p style="Normal" xid="1887" props="text-align:left; dom-dir:ltr">        sys/signal.h     \</p>
<p style="Normal" xid="1888" props="text-align:left; dom-dir:ltr">        sys/signalfd.h   \</p>
<p style="Normal" xid="1889" props="text-align:left; dom-dir:ltr">        sys/syscall.h    \</p>
<p style="Normal" xid="1890" props="text-align:left; dom-dir:ltr">        sys/time.h       \</p>
<p style="Normal" xid="1891" props="text-align:left; dom-dir:ltr">        sys/types.h      \</p>
<p style="Normal" xid="1892">        ])</p>
<p style="Normal" xid="1893"><c></c></p>
<p style="Normal" xid="1894" props="text-align:left; dom-dir:ltr"># Verify whether the &lt;linux/futex.h&gt; header is usable.</p>
<p style="Normal" xid="1895" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if &lt;linux/futex.h&gt; is usable])</p>
<p style="Normal" xid="1896"><c></c></p>
<p style="Normal" xid="1897" props="text-align:left; dom-dir:ltr">AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="1898" props="text-align:left; dom-dir:ltr">#include &lt;linux/futex.h&gt;</p>
<p style="Normal" xid="1899">]], [[</p>
<p style="Normal" xid="1900" props="text-align:left; dom-dir:ltr">  return FUTEX_WAIT;</p>
<p style="Normal" xid="1901">]])], [</p>
<p style="Normal" xid="1902" props="text-align:left; dom-dir:ltr">ac_have_usable_linux_futex_h=yes</p>
<p style="Normal" xid="1903" props="text-align:left; dom-dir:ltr">AC_DEFINE([HAVE_USABLE_LINUX_FUTEX_H], 1,</p>
<p style="Normal" xid="1904" props="text-align:left; dom-dir:ltr">          [Define to 1 if you have a usable &lt;linux/futex.h&gt; header file.])</p>
<p style="Normal" xid="1905" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="1906">], [</p>
<p style="Normal" xid="1907" props="text-align:left; dom-dir:ltr">ac_have_usable_linux_futex_h=no</p>
<p style="Normal" xid="1908" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="1909">])</p>
<p style="Normal" xid="1910"><c></c></p>
<p style="Normal" xid="1911">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="1912" props="text-align:left; dom-dir:ltr"># Checks for typedefs, structures, and compiler characteristics.</p>
<p style="Normal" xid="1913">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="1914" props="text-align:left; dom-dir:ltr">AC_TYPE_UID_T</p>
<p style="Normal" xid="1915" props="text-align:left; dom-dir:ltr">AC_TYPE_OFF_T</p>
<p style="Normal" xid="1916" props="text-align:left; dom-dir:ltr">AC_TYPE_SIZE_T</p>
<p style="Normal" xid="1917" props="text-align:left; dom-dir:ltr">AC_HEADER_TIME</p>
<p style="Normal" xid="1918"><c></c></p>
<p style="Normal" xid="1919"><c></c></p>
<p style="Normal" xid="1920">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="1921" props="text-align:left; dom-dir:ltr"># Checks for library functions.</p>
<p style="Normal" xid="1922">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="1923" props="text-align:left; dom-dir:ltr">AC_FUNC_MEMCMP</p>
<p style="Normal" xid="1924" props="text-align:left; dom-dir:ltr">AC_FUNC_MMAP</p>
<p style="Normal" xid="1925"><c></c></p>
<p style="Normal" xid="1926" props="text-align:left; dom-dir:ltr">AC_CHECK_LIB([pthread], [pthread_create])</p>
<p style="Normal" xid="1927" props="text-align:left; dom-dir:ltr">AC_CHECK_LIB([rt], [clock_gettime])</p>
<p style="Normal" xid="1928"><c></c></p>
<p style="Normal" xid="1929" props="text-align:left; dom-dir:ltr">AC_CHECK_FUNCS([     \</p>
<p style="Normal" xid="1930" props="text-align:left; dom-dir:ltr">        clock_gettime\</p>
<p style="Normal" xid="1931" props="text-align:left; dom-dir:ltr">        epoll_create \</p>
<p style="Normal" xid="1932" props="text-align:left; dom-dir:ltr">        epoll_pwait  \</p>
<p style="Normal" xid="1933" props="text-align:left; dom-dir:ltr">        klogctl      \</p>
<p style="Normal" xid="1934" props="text-align:left; dom-dir:ltr">        mallinfo     \</p>
<p style="Normal" xid="1935" props="text-align:left; dom-dir:ltr">        memchr       \</p>
<p style="Normal" xid="1936" props="text-align:left; dom-dir:ltr">        memset       \</p>
<p style="Normal" xid="1937" props="text-align:left; dom-dir:ltr">        mkdir        \</p>
<p style="Normal" xid="1938" props="text-align:left; dom-dir:ltr">        mremap       \</p>
<p style="Normal" xid="1939" props="text-align:left; dom-dir:ltr">        ppoll        \</p>
<p style="Normal" xid="1940" props="text-align:left; dom-dir:ltr">        pthread_barrier_init       \</p>
<p style="Normal" xid="1941" props="text-align:left; dom-dir:ltr">        pthread_condattr_setclock  \</p>
<p style="Normal" xid="1942" props="text-align:left; dom-dir:ltr">        pthread_mutex_timedlock    \</p>
<p style="Normal" xid="1943" props="text-align:left; dom-dir:ltr">        pthread_rwlock_timedrdlock \</p>
<p style="Normal" xid="1944" props="text-align:left; dom-dir:ltr">        pthread_rwlock_timedwrlock \</p>
<p style="Normal" xid="1945" props="text-align:left; dom-dir:ltr">        pthread_spin_lock          \</p>
<p style="Normal" xid="1946" props="text-align:left; dom-dir:ltr">        pthread_yield              \</p>
<p style="Normal" xid="1947" props="text-align:left; dom-dir:ltr">        readlinkat   \</p>
<p style="Normal" xid="1948" props="text-align:left; dom-dir:ltr">        semtimedop   \</p>
<p style="Normal" xid="1949" props="text-align:left; dom-dir:ltr">        signalfd     \</p>
<p style="Normal" xid="1950" props="text-align:left; dom-dir:ltr">        sigwaitinfo  \</p>
<p style="Normal" xid="1951" props="text-align:left; dom-dir:ltr">        strchr       \</p>
<p style="Normal" xid="1952" props="text-align:left; dom-dir:ltr">        strdup       \</p>
<p style="Normal" xid="1953" props="text-align:left; dom-dir:ltr">        strpbrk      \</p>
<p style="Normal" xid="1954" props="text-align:left; dom-dir:ltr">        strrchr      \</p>
<p style="Normal" xid="1955" props="text-align:left; dom-dir:ltr">        strstr       \</p>
<p style="Normal" xid="1956" props="text-align:left; dom-dir:ltr">        syscall      \</p>
<p style="Normal" xid="1957" props="text-align:left; dom-dir:ltr">        utimensat    \</p>
<p style="Normal" xid="1958" props="text-align:left; dom-dir:ltr">        process_vm_readv  \</p>
<p style="Normal" xid="1959" props="text-align:left; dom-dir:ltr">        process_vm_writev \</p>
<p style="Normal" xid="1960">        ])</p>
<p style="Normal" xid="1961"><c></c></p>
<p style="Normal" xid="1962" props="text-align:left; dom-dir:ltr"># AC_CHECK_LIB adds any library found to the variable LIBS, and links these</p>
<p style="Normal" xid="1963" props="text-align:left; dom-dir:ltr"># libraries with any shared object and/or executable. This is NOT what we</p>
<p style="Normal" xid="1964" props="text-align:left; dom-dir:ltr"># want for e.g. vgpreload_core-x86-linux.so</p>
<p style="Normal" xid="1965" props="text-align:left; dom-dir:ltr">LIBS=""</p>
<p style="Normal" xid="1966"><c></c></p>
<p style="Normal" xid="1967" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([HAVE_PTHREAD_BARRIER],</p>
<p style="Normal" xid="1968" props="text-align:left; dom-dir:ltr">               [test x$ac_cv_func_pthread_barrier_init = xyes])</p>
<p style="Normal" xid="1969" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([HAVE_PTHREAD_MUTEX_TIMEDLOCK],</p>
<p style="Normal" xid="1970" props="text-align:left; dom-dir:ltr">               [test x$ac_cv_func_pthread_mutex_timedlock = xyes])</p>
<p style="Normal" xid="1971" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([HAVE_PTHREAD_SPINLOCK],</p>
<p style="Normal" xid="1972" props="text-align:left; dom-dir:ltr">               [test x$ac_cv_func_pthread_spin_lock = xyes])</p>
<p style="Normal" xid="1973"><c></c></p>
<p style="Normal" xid="1974"><c></c></p>
<p style="Normal" xid="1975">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="1976" props="text-align:left; dom-dir:ltr"># MPI checks</p>
<p style="Normal" xid="1977">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="1978" props="text-align:left; dom-dir:ltr"># Do we have a useable MPI setup on the primary and/or secondary targets?</p>
<p style="Normal" xid="1979" props="text-align:left; dom-dir:ltr"># On Linux, by default, assumes mpicc and -m32/-m64</p>
<p style="Normal" xid="1980" props="text-align:left; dom-dir:ltr"># Note: this is a kludge in that it assumes the specified mpicc </p>
<p style="Normal" xid="1981" props="text-align:left; dom-dir:ltr"># understands -m32/-m64 regardless of what is specified using</p>
<p style="Normal" xid="1982" props="text-align:left; dom-dir:ltr"># --with-mpicc=.</p>
<p style="Normal" xid="1983" props="text-align:left; dom-dir:ltr">MPI_CC="mpicc"</p>
<p style="Normal" xid="1984"><c></c></p>
<p style="Normal" xid="1985" props="text-align:left; dom-dir:ltr">mflag_primary=</p>
<p style="Normal" xid="1986" props="text-align:left; dom-dir:ltr">if test x$VGCONF_PLATFORM_PRI_CAPS = xX86_LINUX \</p>
<p style="Normal" xid="1987" props="text-align:left; dom-dir:ltr">     -o x$VGCONF_PLATFORM_PRI_CAPS = xPPC32_LINUX \</p>
<p style="Normal" xid="1988" props="text-align:left; dom-dir:ltr">     -o x$VGCONF_PLATFORM_PRI_CAPS = xARM_LINUX \</p>
<p style="Normal" xid="1989" props="text-align:left; dom-dir:ltr">     -o x$VGCONF_PLATFORM_PRI_CAPS = xMIPS32_LINUX ; then</p>
<p style="Normal" xid="1990" props="text-align:left; dom-dir:ltr">  mflag_primary=$FLAG_M32</p>
<p style="Normal" xid="1991" props="text-align:left; dom-dir:ltr">elif test x$VGCONF_PLATFORM_PRI_CAPS = xAMD64_LINUX \</p>
<p style="Normal" xid="1992" props="text-align:left; dom-dir:ltr">       -o x$VGCONF_PLATFORM_PRI_CAPS = xPPC64_LINUX \</p>
<p style="Normal" xid="1993" props="text-align:left; dom-dir:ltr">       -o x$VGCONF_PLATFORM_PRI_CAPS = xS390X_LINUX ; then</p>
<p style="Normal" xid="1994" props="text-align:left; dom-dir:ltr">  mflag_primary=$FLAG_M64</p>
<p style="Normal" xid="1995" props="text-align:left; dom-dir:ltr">elif test x$VGCONF_PLATFORM_PRI_CAPS = xX86_DARWIN ; then</p>
<p style="Normal" xid="1996" props="text-align:left; dom-dir:ltr">  mflag_primary="$FLAG_M32 -arch i386"</p>
<p style="Normal" xid="1997" props="text-align:left; dom-dir:ltr">elif test x$VGCONF_PLATFORM_PRI_CAPS = xAMD64_DARWIN ; then</p>
<p style="Normal" xid="1998" props="text-align:left; dom-dir:ltr">  mflag_primary="$FLAG_M64 -arch x86_64"</p>
<p style="Normal" xid="1999" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="2000"><c></c></p>
<p style="Normal" xid="2001" props="text-align:left; dom-dir:ltr">mflag_secondary=</p>
<p style="Normal" xid="2002" props="text-align:left; dom-dir:ltr">if test x$VGCONF_PLATFORM_SEC_CAPS = xX86_LINUX \</p>
<p style="Normal" xid="2003" props="text-align:left; dom-dir:ltr">     -o x$VGCONF_PLATFORM_SEC_CAPS = xPPC32_LINUX ; then</p>
<p style="Normal" xid="2004" props="text-align:left; dom-dir:ltr">  mflag_secondary=$FLAG_M32</p>
<p style="Normal" xid="2005" props="text-align:left; dom-dir:ltr">elif test x$VGCONF_PLATFORM_SEC_CAPS = xX86_DARWIN ; then</p>
<p style="Normal" xid="2006" props="text-align:left; dom-dir:ltr">  mflag_secondary="$FLAG_M32 -arch i386"</p>
<p style="Normal" xid="2007" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="2008"><c></c></p>
<p style="Normal" xid="2009"><c></c></p>
<p style="Normal" xid="2010" props="text-align:left; dom-dir:ltr">AC_ARG_WITH(mpicc,</p>
<p style="Normal" xid="2011" props="text-align:left; dom-dir:ltr">   [  --with-mpicc=           Specify name of MPI2-ised C compiler],</p>
<p style="Normal" xid="2012" props="text-align:left; dom-dir:ltr">   MPI_CC=$withval</p>
<p style="Normal" xid="2013">)</p>
<p style="Normal" xid="2014" props="text-align:left; dom-dir:ltr">AC_SUBST(MPI_CC)</p>
<p style="Normal" xid="2015"><c></c></p>
<p style="Normal" xid="2016" props="text-align:left; dom-dir:ltr">## We AM_COND_IF here instead of automake "if" in mpi/Makefile.am so that we can</p>
<p style="Normal" xid="2017" props="text-align:left; dom-dir:ltr">## use these values in the check for a functioning mpicc.</p>
<p style="Normal" xid="2018">##</p>
<p style="Normal" xid="2019" props="text-align:left; dom-dir:ltr">## We leave the MPI_FLAG_M3264_ logic in mpi/Makefile.am and assume that</p>
<p style="Normal" xid="2020" props="text-align:left; dom-dir:ltr">## mflag_primary/mflag_secondary are sufficient approximations of that behavior</p>
<p style="Normal" xid="2021" props="text-align:left; dom-dir:ltr">AM_COND_IF([VGCONF_OS_IS_LINUX],</p>
<p style="Normal" xid="2022" props="text-align:left; dom-dir:ltr">           [CFLAGS_MPI="-g -O -fno-omit-frame-pointer -Wall -fpic"</p>
<p style="Normal" xid="2023" props="text-align:left; dom-dir:ltr">            LDFLAGS_MPI="-fpic -shared"])</p>
<p style="Normal" xid="2024" props="text-align:left; dom-dir:ltr">AM_COND_IF([VGCONF_OS_IS_DARWIN],</p>
<p style="Normal" xid="2025" props="text-align:left; dom-dir:ltr">           [CFLAGS_MPI="-g -O -fno-omit-frame-pointer -Wall -dynamic"</p>
<p style="Normal" xid="2026" props="text-align:left; dom-dir:ltr">            LDFLAGS_MPI="-dynamic -dynamiclib -all_load"])</p>
<p style="Normal" xid="2027"><c></c></p>
<p style="Normal" xid="2028" props="text-align:left; dom-dir:ltr">AC_SUBST([CFLAGS_MPI])</p>
<p style="Normal" xid="2029" props="text-align:left; dom-dir:ltr">AC_SUBST([LDFLAGS_MPI])</p>
<p style="Normal" xid="2030"><c></c></p>
<p style="Normal" xid="2031"><c></c></p>
<p style="Normal" xid="2032" props="text-align:left; dom-dir:ltr">## See if MPI_CC works for the primary target</p>
<p style="Normal" xid="2033">##</p>
<p style="Normal" xid="2034" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([primary target for usable MPI2-compliant C compiler and mpi.h])</p>
<p style="Normal" xid="2035" props="text-align:left; dom-dir:ltr">saved_CC=$CC</p>
<p style="Normal" xid="2036" props="text-align:left; dom-dir:ltr">saved_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="2037" props="text-align:left; dom-dir:ltr">CC=$MPI_CC</p>
<p style="Normal" xid="2038" props="text-align:left; dom-dir:ltr">CFLAGS="$CFLAGS_MPI $mflag_primary"</p>
<p style="Normal" xid="2039" props="text-align:left; dom-dir:ltr">saved_LDFLAGS="$LDFLAGS"</p>
<p style="Normal" xid="2040" props="text-align:left; dom-dir:ltr">LDFLAGS="$LDFLAGS_MPI $mflag_primary"</p>
<p style="Normal" xid="2041" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="2042" props="text-align:left; dom-dir:ltr">#include &lt;mpi.h&gt;</p>
<p style="Normal" xid="2043" props="text-align:left; dom-dir:ltr">#include &lt;stdio.h&gt;</p>
<p style="Normal" xid="2044">]], [[</p>
<p style="Normal" xid="2045" props="text-align:left; dom-dir:ltr">  int ni, na, nd, comb;</p>
<p style="Normal" xid="2046" props="text-align:left; dom-dir:ltr">  int r = MPI_Init(NULL,NULL);</p>
<p style="Normal" xid="2047" props="text-align:left; dom-dir:ltr">  r |= MPI_Type_get_envelope( MPI_INT, &amp;ni, &amp;na, &amp;nd, &amp;comb );</p>
<p style="Normal" xid="2048" props="text-align:left; dom-dir:ltr">  r |= MPI_Finalize();</p>
<p style="Normal" xid="2049" props="text-align:left; dom-dir:ltr">  return r; </p>
<p style="Normal" xid="2050">]])], [</p>
<p style="Normal" xid="2051" props="text-align:left; dom-dir:ltr">ac_have_mpi2_pri=yes</p>
<p style="Normal" xid="2052" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes, $MPI_CC])</p>
<p style="Normal" xid="2053">], [</p>
<p style="Normal" xid="2054" props="text-align:left; dom-dir:ltr">ac_have_mpi2_pri=no</p>
<p style="Normal" xid="2055" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="2056">])</p>
<p style="Normal" xid="2057" props="text-align:left; dom-dir:ltr">CC=$saved_CC</p>
<p style="Normal" xid="2058" props="text-align:left; dom-dir:ltr">CFLAGS=$saved_CFLAGS</p>
<p style="Normal" xid="2059" props="text-align:left; dom-dir:ltr">LDFLAGS="$saved_LDFLAGS"</p>
<p style="Normal" xid="2060" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(BUILD_MPIWRAP_PRI, test x$ac_have_mpi2_pri = xyes)</p>
<p style="Normal" xid="2061"><c></c></p>
<p style="Normal" xid="2062" props="text-align:left; dom-dir:ltr">## See if MPI_CC works for the secondary target.  Complication: what if</p>
<p style="Normal" xid="2063" props="text-align:left; dom-dir:ltr">## there is no secondary target?  We need this to then fail.</p>
<p style="Normal" xid="2064" props="text-align:left; dom-dir:ltr">## Kludge this by making MPI_CC something which will surely fail in</p>
<p style="Normal" xid="2065" props="text-align:left; dom-dir:ltr">## such a case.</p>
<p style="Normal" xid="2066">##</p>
<p style="Normal" xid="2067" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([secondary target for usable MPI2-compliant C compiler and mpi.h])</p>
<p style="Normal" xid="2068" props="text-align:left; dom-dir:ltr">saved_CC=$CC</p>
<p style="Normal" xid="2069" props="text-align:left; dom-dir:ltr">saved_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="2070" props="text-align:left; dom-dir:ltr">saved_LDFLAGS="$LDFLAGS"</p>
<p style="Normal" xid="2071" props="text-align:left; dom-dir:ltr">LDFLAGS="$LDFLAGS_MPI $mflag_secondary"</p>
<p style="Normal" xid="2072" props="text-align:left; dom-dir:ltr">if test x$VGCONF_PLATFORM_SEC_CAPS = x ; then</p>
<p style="Normal" xid="2073" props="text-align:left; dom-dir:ltr">  CC="$MPI_CC this will surely fail"</p>
<p style="Normal" xid="2074" props="text-align:left; dom-dir:ltr">else</p>
<p style="Normal" xid="2075" props="text-align:left; dom-dir:ltr">  CC=$MPI_CC</p>
<p style="Normal" xid="2076" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="2077" props="text-align:left; dom-dir:ltr">CFLAGS="$CFLAGS_MPI $mflag_secondary"</p>
<p style="Normal" xid="2078" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="2079" props="text-align:left; dom-dir:ltr">#include &lt;mpi.h&gt;</p>
<p style="Normal" xid="2080" props="text-align:left; dom-dir:ltr">#include &lt;stdio.h&gt;</p>
<p style="Normal" xid="2081">]], [[</p>
<p style="Normal" xid="2082" props="text-align:left; dom-dir:ltr">  int ni, na, nd, comb;</p>
<p style="Normal" xid="2083" props="text-align:left; dom-dir:ltr">  int r = MPI_Init(NULL,NULL);</p>
<p style="Normal" xid="2084" props="text-align:left; dom-dir:ltr">  r |= MPI_Type_get_envelope( MPI_INT, &amp;ni, &amp;na, &amp;nd, &amp;comb );</p>
<p style="Normal" xid="2085" props="text-align:left; dom-dir:ltr">  r |= MPI_Finalize();</p>
<p style="Normal" xid="2086" props="text-align:left; dom-dir:ltr">  return r; </p>
<p style="Normal" xid="2087">]])], [</p>
<p style="Normal" xid="2088" props="text-align:left; dom-dir:ltr">ac_have_mpi2_sec=yes</p>
<p style="Normal" xid="2089" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes, $MPI_CC])</p>
<p style="Normal" xid="2090">], [</p>
<p style="Normal" xid="2091" props="text-align:left; dom-dir:ltr">ac_have_mpi2_sec=no</p>
<p style="Normal" xid="2092" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="2093">])</p>
<p style="Normal" xid="2094" props="text-align:left; dom-dir:ltr">CC=$saved_CC</p>
<p style="Normal" xid="2095" props="text-align:left; dom-dir:ltr">CFLAGS=$saved_CFLAGS</p>
<p style="Normal" xid="2096" props="text-align:left; dom-dir:ltr">LDFLAGS="$saved_LDFLAGS"</p>
<p style="Normal" xid="2097" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL(BUILD_MPIWRAP_SEC, test x$ac_have_mpi2_sec = xyes)</p>
<p style="Normal" xid="2098"><c></c></p>
<p style="Normal" xid="2099"><c></c></p>
<p style="Normal" xid="2100">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="2101" props="text-align:left; dom-dir:ltr"># Other library checks</p>
<p style="Normal" xid="2102">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="2103" props="text-align:left; dom-dir:ltr"># There now follow some tests for Boost, and OpenMP.  These</p>
<p style="Normal" xid="2104" props="text-align:left; dom-dir:ltr"># tests are present because Drd has some regression tests that use</p>
<p style="Normal" xid="2105" props="text-align:left; dom-dir:ltr"># these packages.  All regression test programs all compiled only</p>
<p style="Normal" xid="2106" props="text-align:left; dom-dir:ltr"># for the primary target.  And so it is important that the configure</p>
<p style="Normal" xid="2107" props="text-align:left; dom-dir:ltr"># checks that follow, use the correct -m32 or -m64 flag for the</p>
<p style="Normal" xid="2108" props="text-align:left; dom-dir:ltr"># primary target (called $mflag_primary).  Otherwise, we can end up</p>
<p style="Normal" xid="2109" props="text-align:left; dom-dir:ltr"># in a situation (eg) where, on amd64-linux, the test for Boost checks</p>
<p style="Normal" xid="2110" props="text-align:left; dom-dir:ltr"># for usable 64-bit Boost facilities, but because we are doing a 32-bit</p>
<p style="Normal" xid="2111" props="text-align:left; dom-dir:ltr"># only build (meaning, the primary target is x86-linux), the build</p>
<p style="Normal" xid="2112" props="text-align:left; dom-dir:ltr"># of the regtest programs that use Boost fails, because they are </p>
<p style="Normal" xid="2113" props="text-align:left; dom-dir:ltr"># build as 32-bit (IN THIS EXAMPLE).</p>
<p style="Normal" xid="2114">#</p>
<p style="Normal" xid="2115" props="text-align:left; dom-dir:ltr"># Hence: ALWAYS USE $mflag_primary FOR CONFIGURE TESTS FOR FACILITIES</p>
<p style="Normal" xid="2116" props="text-align:left; dom-dir:ltr"># NEEDED BY THE REGRESSION TEST PROGRAMS.</p>
<p style="Normal" xid="2117"><c></c></p>
<p style="Normal" xid="2118"><c></c></p>
<p style="Normal" xid="2119" props="text-align:left; dom-dir:ltr"># Check whether the boost library 1.35 or later has been installed.</p>
<p style="Normal" xid="2120" props="text-align:left; dom-dir:ltr"># The Boost.Threads library has undergone a major rewrite in version 1.35.0.</p>
<p style="Normal" xid="2121"><c></c></p>
<p style="Normal" xid="2122" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for boost])</p>
<p style="Normal" xid="2123"><c></c></p>
<p style="Normal" xid="2124" props="text-align:left; dom-dir:ltr">AC_LANG(C++)</p>
<p style="Normal" xid="2125" props="text-align:left; dom-dir:ltr">safe_CXXFLAGS=$CXXFLAGS</p>
<p style="Normal" xid="2126" props="text-align:left; dom-dir:ltr">CXXFLAGS="$mflag_primary"</p>
<p style="Normal" xid="2127" props="text-align:left; dom-dir:ltr">safe_LIBS="$LIBS"</p>
<p style="Normal" xid="2128" props="text-align:left; dom-dir:ltr">LIBS="-lboost_thread-mt $LIBS"</p>
<p style="Normal" xid="2129"><c></c></p>
<p style="Normal" xid="2130" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_SOURCE([</p>
<p style="Normal" xid="2131" props="text-align:left; dom-dir:ltr">#include &lt;boost/thread.hpp&gt;</p>
<p style="Normal" xid="2132" props="text-align:left; dom-dir:ltr">static void thread_func(void)</p>
<p style="Normal" xid="2133">{ }</p>
<p style="Normal" xid="2134" props="text-align:left; dom-dir:ltr">int main(int argc, char** argv)</p>
<p style="Normal" xid="2135">{</p>
<p style="Normal" xid="2136" props="text-align:left; dom-dir:ltr">  boost::thread t(thread_func);</p>
<p style="Normal" xid="2137" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="2138">}</p>
<p style="Normal" xid="2139">])],</p>
<p style="Normal" xid="2140">[</p>
<p style="Normal" xid="2141" props="text-align:left; dom-dir:ltr">ac_have_boost_1_35=yes</p>
<p style="Normal" xid="2142" props="text-align:left; dom-dir:ltr">AC_SUBST([BOOST_CFLAGS], [])</p>
<p style="Normal" xid="2143" props="text-align:left; dom-dir:ltr">AC_SUBST([BOOST_LIBS], [-lboost_thread-mt])</p>
<p style="Normal" xid="2144" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="2145">], [</p>
<p style="Normal" xid="2146" props="text-align:left; dom-dir:ltr">ac_have_boost_1_35=no</p>
<p style="Normal" xid="2147" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="2148">])</p>
<p style="Normal" xid="2149"><c></c></p>
<p style="Normal" xid="2150" props="text-align:left; dom-dir:ltr">LIBS="$safe_LIBS"</p>
<p style="Normal" xid="2151" props="text-align:left; dom-dir:ltr">CXXFLAGS=$safe_CXXFLAGS</p>
<p style="Normal" xid="2152" props="text-align:left; dom-dir:ltr">AC_LANG(C)</p>
<p style="Normal" xid="2153"><c></c></p>
<p style="Normal" xid="2154" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([HAVE_BOOST_1_35], [test x$ac_have_boost_1_35 = xyes])</p>
<p style="Normal" xid="2155"><c></c></p>
<p style="Normal" xid="2156"><c></c></p>
<p style="Normal" xid="2157" props="text-align:left; dom-dir:ltr"># does this compiler support -fopenmp, does it have the include file</p>
<p style="Normal" xid="2158" props="text-align:left; dom-dir:ltr"># &lt;omp.h&gt; and does it have libgomp ?</p>
<p style="Normal" xid="2159"><c></c></p>
<p style="Normal" xid="2160" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([for OpenMP])</p>
<p style="Normal" xid="2161"><c></c></p>
<p style="Normal" xid="2162" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="2163" props="text-align:left; dom-dir:ltr">CFLAGS="-fopenmp $mflag_primary"</p>
<p style="Normal" xid="2164"><c></c></p>
<p style="Normal" xid="2165" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_SOURCE([</p>
<p style="Normal" xid="2166" props="text-align:left; dom-dir:ltr">#include &lt;omp.h&gt; </p>
<p style="Normal" xid="2167" props="text-align:left; dom-dir:ltr">int main(int argc, char** argv)</p>
<p style="Normal" xid="2168">{</p>
<p style="Normal" xid="2169" props="text-align:left; dom-dir:ltr">  omp_set_dynamic(0);</p>
<p style="Normal" xid="2170" props="text-align:left; dom-dir:ltr">  return 0;</p>
<p style="Normal" xid="2171">}</p>
<p style="Normal" xid="2172">])],</p>
<p style="Normal" xid="2173">[</p>
<p style="Normal" xid="2174" props="text-align:left; dom-dir:ltr">ac_have_openmp=yes</p>
<p style="Normal" xid="2175" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="2176">], [</p>
<p style="Normal" xid="2177" props="text-align:left; dom-dir:ltr">ac_have_openmp=no</p>
<p style="Normal" xid="2178" props="text-align:left; dom-dir:ltr">AC_MSG_RESULT([no])</p>
<p style="Normal" xid="2179">])</p>
<p style="Normal" xid="2180" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="2181"><c></c></p>
<p style="Normal" xid="2182" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([HAVE_OPENMP], [test x$ac_have_openmp = xyes])</p>
<p style="Normal" xid="2183"><c></c></p>
<p style="Normal" xid="2184"><c></c></p>
<p style="Normal" xid="2185" props="text-align:left; dom-dir:ltr"># does this compiler have built-in functions for atomic memory access for the</p>
<p style="Normal" xid="2186" props="text-align:left; dom-dir:ltr"># primary target ?</p>
<p style="Normal" xid="2187" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc supports __sync_add_and_fetch for the primary target])</p>
<p style="Normal" xid="2188"><c></c></p>
<p style="Normal" xid="2189" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="2190" props="text-align:left; dom-dir:ltr">CFLAGS="$mflag_primary"</p>
<p style="Normal" xid="2191"><c></c></p>
<p style="Normal" xid="2192" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="2193" props="text-align:left; dom-dir:ltr">  int variable = 1;</p>
<p style="Normal" xid="2194" props="text-align:left; dom-dir:ltr">  return (__sync_bool_compare_and_swap(&amp;variable, 1, 2)</p>
<p style="Normal" xid="2195" props="text-align:left; dom-dir:ltr">          &amp;&amp; __sync_add_and_fetch(&amp;variable, 1) ? 1 : 0)</p>
<p style="Normal" xid="2196">]])], [</p>
<p style="Normal" xid="2197" props="text-align:left; dom-dir:ltr">  ac_have_builtin_atomic_primary=yes</p>
<p style="Normal" xid="2198" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="2199" props="text-align:left; dom-dir:ltr">  AC_DEFINE(HAVE_BUILTIN_ATOMIC, 1, [Define to 1 if gcc supports __sync_bool_compare_and_swap() and __sync_add_and_fetch() for the primary target])</p>
<p style="Normal" xid="2200">], [</p>
<p style="Normal" xid="2201" props="text-align:left; dom-dir:ltr">  ac_have_builtin_atomic_primary=no</p>
<p style="Normal" xid="2202" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([no])</p>
<p style="Normal" xid="2203">])</p>
<p style="Normal" xid="2204"><c></c></p>
<p style="Normal" xid="2205" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="2206"><c></c></p>
<p style="Normal" xid="2207" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([HAVE_BUILTIN_ATOMIC],</p>
<p style="Normal" xid="2208" props="text-align:left; dom-dir:ltr">               [test x$ac_have_builtin_atomic_primary = xyes])</p>
<p style="Normal" xid="2209"><c></c></p>
<p style="Normal" xid="2210"><c></c></p>
<p style="Normal" xid="2211" props="text-align:left; dom-dir:ltr"># does this compiler have built-in functions for atomic memory access for the</p>
<p style="Normal" xid="2212" props="text-align:left; dom-dir:ltr"># secondary target ?</p>
<p style="Normal" xid="2213"><c></c></p>
<p style="Normal" xid="2214" props="text-align:left; dom-dir:ltr">if test x$VGCONF_PLATFORM_SEC_CAPS != x; then</p>
<p style="Normal" xid="2215"><c></c></p>
<p style="Normal" xid="2216" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc supports __sync_add_and_fetch for the secondary target])</p>
<p style="Normal" xid="2217"><c></c></p>
<p style="Normal" xid="2218" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="2219" props="text-align:left; dom-dir:ltr">CFLAGS="$mflag_secondary"</p>
<p style="Normal" xid="2220"><c></c></p>
<p style="Normal" xid="2221" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="2222" props="text-align:left; dom-dir:ltr">  int variable = 1;</p>
<p style="Normal" xid="2223" props="text-align:left; dom-dir:ltr">  return (__sync_add_and_fetch(&amp;variable, 1) ? 1 : 0)</p>
<p style="Normal" xid="2224">]])], [</p>
<p style="Normal" xid="2225" props="text-align:left; dom-dir:ltr">  ac_have_builtin_atomic_secondary=yes</p>
<p style="Normal" xid="2226" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="2227">], [</p>
<p style="Normal" xid="2228" props="text-align:left; dom-dir:ltr">  ac_have_builtin_atomic_secondary=no</p>
<p style="Normal" xid="2229" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([no])</p>
<p style="Normal" xid="2230">])</p>
<p style="Normal" xid="2231"><c></c></p>
<p style="Normal" xid="2232" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="2233"><c></c></p>
<p style="Normal" xid="2234" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="2235"><c></c></p>
<p style="Normal" xid="2236" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([HAVE_BUILTIN_ATOMIC_SECONDARY],</p>
<p style="Normal" xid="2237" props="text-align:left; dom-dir:ltr">               [test x$ac_have_builtin_atomic_secondary = xyes])</p>
<p style="Normal" xid="2238"><c></c></p>
<p style="Normal" xid="2239" props="text-align:left; dom-dir:ltr"># does this compiler have built-in functions for atomic memory access on</p>
<p style="Normal" xid="2240" props="text-align:left; dom-dir:ltr"># 64-bit integers for all targets ?</p>
<p style="Normal" xid="2241"><c></c></p>
<p style="Normal" xid="2242" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if gcc supports __sync_add_and_fetch on uint64_t for all targets])</p>
<p style="Normal" xid="2243"><c></c></p>
<p style="Normal" xid="2244" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="2245" props="text-align:left; dom-dir:ltr">  #include &lt;stdint.h&gt;</p>
<p style="Normal" xid="2246">]], [[</p>
<p style="Normal" xid="2247" props="text-align:left; dom-dir:ltr">  uint64_t variable = 1;</p>
<p style="Normal" xid="2248" props="text-align:left; dom-dir:ltr">  return __sync_add_and_fetch(&amp;variable, 1)</p>
<p style="Normal" xid="2249">]])], [</p>
<p style="Normal" xid="2250" props="text-align:left; dom-dir:ltr">  ac_have_builtin_atomic64_primary=yes</p>
<p style="Normal" xid="2251">], [</p>
<p style="Normal" xid="2252" props="text-align:left; dom-dir:ltr">  ac_have_builtin_atomic64_primary=no</p>
<p style="Normal" xid="2253">])</p>
<p style="Normal" xid="2254"><c></c></p>
<p style="Normal" xid="2255" props="text-align:left; dom-dir:ltr">if test x$VGCONF_PLATFORM_SEC_CAPS != x; then</p>
<p style="Normal" xid="2256"><c></c></p>
<p style="Normal" xid="2257" props="text-align:left; dom-dir:ltr">safe_CFLAGS=$CFLAGS</p>
<p style="Normal" xid="2258" props="text-align:left; dom-dir:ltr">CFLAGS="$mflag_secondary"</p>
<p style="Normal" xid="2259"><c></c></p>
<p style="Normal" xid="2260" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="2261" props="text-align:left; dom-dir:ltr">  #include &lt;stdint.h&gt;</p>
<p style="Normal" xid="2262">]], [[</p>
<p style="Normal" xid="2263" props="text-align:left; dom-dir:ltr">  uint64_t variable = 1;</p>
<p style="Normal" xid="2264" props="text-align:left; dom-dir:ltr">  return __sync_add_and_fetch(&amp;variable, 1)</p>
<p style="Normal" xid="2265">]])], [</p>
<p style="Normal" xid="2266" props="text-align:left; dom-dir:ltr">  ac_have_builtin_atomic64_secondary=yes</p>
<p style="Normal" xid="2267">], [</p>
<p style="Normal" xid="2268" props="text-align:left; dom-dir:ltr">  ac_have_builtin_atomic64_secondary=no</p>
<p style="Normal" xid="2269">])</p>
<p style="Normal" xid="2270"><c></c></p>
<p style="Normal" xid="2271" props="text-align:left; dom-dir:ltr">CFLAGS=$safe_CFLAGS</p>
<p style="Normal" xid="2272"><c></c></p>
<p style="Normal" xid="2273" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="2274"><c></c></p>
<p style="Normal" xid="2275" props="text-align:left; dom-dir:ltr">if test x$ac_have_builtin_atomic64_primary = xyes &amp;&amp; \</p>
<p style="Normal" xid="2276" props="text-align:left; dom-dir:ltr">   test x$VGCONF_PLATFORM_SEC_CAPS = x \</p>
<p style="Normal" xid="2277" props="text-align:left; dom-dir:ltr">     -o x$ac_have_builtin_atomic64_secondary = xyes; then</p>
<p style="Normal" xid="2278" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="2279" props="text-align:left; dom-dir:ltr">  ac_have_builtin_atomic64=yes</p>
<p style="Normal" xid="2280" props="text-align:left; dom-dir:ltr">else</p>
<p style="Normal" xid="2281" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([no])</p>
<p style="Normal" xid="2282" props="text-align:left; dom-dir:ltr">  ac_have_builtin_atomic64=no</p>
<p style="Normal" xid="2283" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="2284"><c></c></p>
<p style="Normal" xid="2285" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([HAVE_BUILTIN_ATOMIC64],</p>
<p style="Normal" xid="2286" props="text-align:left; dom-dir:ltr">               [test x$ac_have_builtin_atomic64 = xyes])</p>
<p style="Normal" xid="2287"><c></c></p>
<p style="Normal" xid="2288"><c></c></p>
<p style="Normal" xid="2289" props="text-align:left; dom-dir:ltr"># does g++ have built-in functions for atomic memory access ?</p>
<p style="Normal" xid="2290" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if g++ supports __sync_add_and_fetch])</p>
<p style="Normal" xid="2291"><c></c></p>
<p style="Normal" xid="2292" props="text-align:left; dom-dir:ltr">safe_CXXFLAGS=$CXXFLAGS</p>
<p style="Normal" xid="2293" props="text-align:left; dom-dir:ltr">CXXFLAGS="$mflag_primary"</p>
<p style="Normal" xid="2294"><c></c></p>
<p style="Normal" xid="2295" props="text-align:left; dom-dir:ltr">AC_LANG_PUSH(C++)</p>
<p style="Normal" xid="2296" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[</p>
<p style="Normal" xid="2297" props="text-align:left; dom-dir:ltr">  int variable = 1;</p>
<p style="Normal" xid="2298" props="text-align:left; dom-dir:ltr">  return (__sync_bool_compare_and_swap(&amp;variable, 1, 2)</p>
<p style="Normal" xid="2299" props="text-align:left; dom-dir:ltr">          &amp;&amp; __sync_add_and_fetch(&amp;variable, 1) ? 1 : 0)</p>
<p style="Normal" xid="2300">]])], [</p>
<p style="Normal" xid="2301" props="text-align:left; dom-dir:ltr">  ac_have_builtin_atomic_cxx=yes</p>
<p style="Normal" xid="2302" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="2303" props="text-align:left; dom-dir:ltr">  AC_DEFINE(HAVE_BUILTIN_ATOMIC_CXX, 1, [Define to 1 if g++ supports __sync_bool_compare_and_swap() and __sync_add_and_fetch()])</p>
<p style="Normal" xid="2304">], [</p>
<p style="Normal" xid="2305" props="text-align:left; dom-dir:ltr">  ac_have_builtin_atomic_cxx=no</p>
<p style="Normal" xid="2306" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([no])</p>
<p style="Normal" xid="2307">])</p>
<p style="Normal" xid="2308" props="text-align:left; dom-dir:ltr">AC_LANG_POP(C++)</p>
<p style="Normal" xid="2309"><c></c></p>
<p style="Normal" xid="2310" props="text-align:left; dom-dir:ltr">CXXFLAGS=$safe_CXXFLAGS</p>
<p style="Normal" xid="2311"><c></c></p>
<p style="Normal" xid="2312" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([HAVE_BUILTIN_ATOMIC_CXX], [test x$ac_have_builtin_atomic_cxx = xyes])</p>
<p style="Normal" xid="2313"><c></c></p>
<p style="Normal" xid="2314"><c></c></p>
<p style="Normal" xid="2315" props="text-align:left; dom-dir:ltr">if test x$ac_have_usable_linux_futex_h = xyes \</p>
<p style="Normal" xid="2316" props="text-align:left; dom-dir:ltr">        -a x$ac_have_builtin_atomic_primary = xyes; then</p>
<p style="Normal" xid="2317" props="text-align:left; dom-dir:ltr">  ac_enable_linux_ticket_lock_primary=yes</p>
<p style="Normal" xid="2318" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="2319" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([ENABLE_LINUX_TICKET_LOCK_PRIMARY],</p>
<p style="Normal" xid="2320" props="text-align:left; dom-dir:ltr">               [test x$ac_enable_linux_ticket_lock_primary = xyes])</p>
<p style="Normal" xid="2321"><c></c></p>
<p style="Normal" xid="2322" props="text-align:left; dom-dir:ltr">if test x$VGCONF_PLATFORM_SEC_CAPS != x \</p>
<p style="Normal" xid="2323" props="text-align:left; dom-dir:ltr">        -a x$ac_have_usable_linux_futex_h = xyes \</p>
<p style="Normal" xid="2324" props="text-align:left; dom-dir:ltr">        -a x$ac_have_builtin_atomic_secondary = xyes; then</p>
<p style="Normal" xid="2325" props="text-align:left; dom-dir:ltr">  ac_enable_linux_ticket_lock_secondary=yes</p>
<p style="Normal" xid="2326" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="2327" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([ENABLE_LINUX_TICKET_LOCK_SECONDARY],</p>
<p style="Normal" xid="2328" props="text-align:left; dom-dir:ltr">               [test x$ac_enable_linux_ticket_lock_secondary = xyes])</p>
<p style="Normal" xid="2329"><c></c></p>
<p style="Normal" xid="2330"><c></c></p>
<p style="Normal" xid="2331" props="text-align:left; dom-dir:ltr"># does libstdc++ support annotating shared pointers ?</p>
<p style="Normal" xid="2332" props="text-align:left; dom-dir:ltr">AC_MSG_CHECKING([if libstdc++ supports annotating shared pointers])</p>
<p style="Normal" xid="2333"><c></c></p>
<p style="Normal" xid="2334" props="text-align:left; dom-dir:ltr">safe_CXXFLAGS=$CFLAGS</p>
<p style="Normal" xid="2335" props="text-align:left; dom-dir:ltr">CXXFLAGS="-std=c++0x"</p>
<p style="Normal" xid="2336"><c></c></p>
<p style="Normal" xid="2337" props="text-align:left; dom-dir:ltr">AC_LANG_PUSH(C++)</p>
<p style="Normal" xid="2338" props="text-align:left; dom-dir:ltr">AC_LINK_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="2339" props="text-align:left; dom-dir:ltr">  #include &lt;memory&gt;</p>
<p style="Normal" xid="2340">]], [[</p>
<p style="Normal" xid="2341" props="text-align:left; dom-dir:ltr">  std::shared_ptr&lt;int&gt; p</p>
<p style="Normal" xid="2342">]])], [</p>
<p style="Normal" xid="2343" props="text-align:left; dom-dir:ltr">  ac_have_shared_ptr=yes</p>
<p style="Normal" xid="2344">], [</p>
<p style="Normal" xid="2345" props="text-align:left; dom-dir:ltr">  ac_have_shared_ptr=no</p>
<p style="Normal" xid="2346">])</p>
<p style="Normal" xid="2347" props="text-align:left; dom-dir:ltr">if test x$ac_have_shared_ptr = xyes; then</p>
<p style="Normal" xid="2348" props="text-align:left; dom-dir:ltr">  # If compilation of the program below fails because of a syntax error</p>
<p style="Normal" xid="2349" props="text-align:left; dom-dir:ltr">  # triggered by substituting one of the annotation macros then that</p>
<p style="Normal" xid="2350" props="text-align:left; dom-dir:ltr">  # means that libstdc++ supports these macros.</p>
<p style="Normal" xid="2351" props="text-align:left; dom-dir:ltr">  AC_LINK_IFELSE([AC_LANG_PROGRAM([[</p>
<p style="Normal" xid="2352" props="text-align:left; dom-dir:ltr">    #define _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(a) (a)----</p>
<p style="Normal" xid="2353" props="text-align:left; dom-dir:ltr">    #define _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(a) (a)----</p>
<p style="Normal" xid="2354" props="text-align:left; dom-dir:ltr">    #include &lt;memory&gt;</p>
<p style="Normal" xid="2355">  ]], [[</p>
<p style="Normal" xid="2356" props="text-align:left; dom-dir:ltr">    std::shared_ptr&lt;int&gt; p</p>
<p style="Normal" xid="2357">  ]])], [</p>
<p style="Normal" xid="2358" props="text-align:left; dom-dir:ltr">    ac_have_shared_pointer_annotation=no</p>
<p style="Normal" xid="2359" props="text-align:left; dom-dir:ltr">    AC_MSG_RESULT([no])</p>
<p style="Normal" xid="2360">  ], [</p>
<p style="Normal" xid="2361" props="text-align:left; dom-dir:ltr">    ac_have_shared_pointer_annotation=yes</p>
<p style="Normal" xid="2362" props="text-align:left; dom-dir:ltr">    AC_MSG_RESULT([yes])</p>
<p style="Normal" xid="2363" props="text-align:left; dom-dir:ltr">    AC_DEFINE(HAVE_SHARED_POINTER_ANNOTATION, 1,</p>
<p style="Normal" xid="2364" props="text-align:left; dom-dir:ltr">              [Define to 1 if libstd++ supports annotating shared pointers])</p>
<p style="Normal" xid="2365">  ])</p>
<p style="Normal" xid="2366" props="text-align:left; dom-dir:ltr">else</p>
<p style="Normal" xid="2367" props="text-align:left; dom-dir:ltr">  ac_have_shared_pointer_annotation=no</p>
<p style="Normal" xid="2368" props="text-align:left; dom-dir:ltr">  AC_MSG_RESULT([no])</p>
<p style="Normal" xid="2369" props="text-align:left; dom-dir:ltr">fi</p>
<p style="Normal" xid="2370" props="text-align:left; dom-dir:ltr">AC_LANG_POP(C++)</p>
<p style="Normal" xid="2371"><c></c></p>
<p style="Normal" xid="2372" props="text-align:left; dom-dir:ltr">CXXFLAGS=$safe_CXXFLAGS</p>
<p style="Normal" xid="2373"><c></c></p>
<p style="Normal" xid="2374" props="text-align:left; dom-dir:ltr">AM_CONDITIONAL([HAVE_SHARED_POINTER_ANNOTATION],</p>
<p style="Normal" xid="2375" props="text-align:left; dom-dir:ltr">               [test x$ac_have_shared_pointer_annotation = xyes])</p>
<p style="Normal" xid="2376"><c></c></p>
<p style="Normal" xid="2377"><c></c></p>
<p style="Normal" xid="2378">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="2379" props="text-align:left; dom-dir:ltr"># Ok.  We're done checking.</p>
<p style="Normal" xid="2380">#----------------------------------------------------------------------------</p>
<p style="Normal" xid="2381"><c></c></p>
<p style="Normal" xid="2382" props="text-align:left; dom-dir:ltr"># Nb: VEX/Makefile is generated from Makefile.vex.in.</p>
<p style="Normal" xid="2383" props="text-align:left; dom-dir:ltr">AC_CONFIG_FILES([</p>
<p style="Normal" xid="2384" props="text-align:left; dom-dir:ltr">   Makefile </p>
<p style="Normal" xid="2385" props="text-align:left; dom-dir:ltr">   VEX/Makefile:Makefile.vex.in</p>
<p style="Normal" xid="2386" props="text-align:left; dom-dir:ltr">   valgrind.spec</p>
<p style="Normal" xid="2387" props="text-align:left; dom-dir:ltr">   valgrind.pc</p>
<p style="Normal" xid="2388" props="text-align:left; dom-dir:ltr">   glibc-2.X.supp</p>
<p style="Normal" xid="2389" props="text-align:left; dom-dir:ltr">   docs/Makefile </p>
<p style="Normal" xid="2390" props="text-align:left; dom-dir:ltr">   tests/Makefile </p>
<p style="Normal" xid="2391" props="text-align:left; dom-dir:ltr">   tests/vg_regtest </p>
<p style="Normal" xid="2392" props="text-align:left; dom-dir:ltr">   perf/Makefile </p>
<p style="Normal" xid="2393" props="text-align:left; dom-dir:ltr">   perf/vg_perf</p>
<p style="Normal" xid="2394" props="text-align:left; dom-dir:ltr">   gdbserver_tests/Makefile</p>
<p style="Normal" xid="2395" props="text-align:left; dom-dir:ltr">   include/Makefile </p>
<p style="Normal" xid="2396" props="text-align:left; dom-dir:ltr">   auxprogs/Makefile</p>
<p style="Normal" xid="2397" props="text-align:left; dom-dir:ltr">   mpi/Makefile</p>
<p style="Normal" xid="2398" props="text-align:left; dom-dir:ltr">   coregrind/Makefile </p>
<p style="Normal" xid="2399" props="text-align:left; dom-dir:ltr">   memcheck/Makefile</p>
<p style="Normal" xid="2400" props="text-align:left; dom-dir:ltr">   memcheck/tests/Makefile</p>
<p style="Normal" xid="2401" props="text-align:left; dom-dir:ltr">   memcheck/tests/amd64/Makefile</p>
<p style="Normal" xid="2402" props="text-align:left; dom-dir:ltr">   memcheck/tests/x86/Makefile</p>
<p style="Normal" xid="2403" props="text-align:left; dom-dir:ltr">   memcheck/tests/linux/Makefile</p>
<p style="Normal" xid="2404" props="text-align:left; dom-dir:ltr">   memcheck/tests/darwin/Makefile</p>
<p style="Normal" xid="2405" props="text-align:left; dom-dir:ltr">   memcheck/tests/amd64-linux/Makefile</p>
<p style="Normal" xid="2406" props="text-align:left; dom-dir:ltr">   memcheck/tests/x86-linux/Makefile</p>
<p style="Normal" xid="2407" props="text-align:left; dom-dir:ltr">   memcheck/tests/ppc32/Makefile</p>
<p style="Normal" xid="2408" props="text-align:left; dom-dir:ltr">   memcheck/tests/ppc64/Makefile</p>
<p style="Normal" xid="2409" props="text-align:left; dom-dir:ltr">   memcheck/tests/s390x/Makefile</p>
<p style="Normal" xid="2410" props="text-align:left; dom-dir:ltr">   cachegrind/Makefile</p>
<p style="Normal" xid="2411" props="text-align:left; dom-dir:ltr">   cachegrind/tests/Makefile</p>
<p style="Normal" xid="2412" props="text-align:left; dom-dir:ltr">   cachegrind/tests/x86/Makefile</p>
<p style="Normal" xid="2413" props="text-align:left; dom-dir:ltr">   cachegrind/cg_annotate</p>
<p style="Normal" xid="2414" props="text-align:left; dom-dir:ltr">   cachegrind/cg_diff</p>
<p style="Normal" xid="2415" props="text-align:left; dom-dir:ltr">   callgrind/Makefile</p>
<p style="Normal" xid="2416" props="text-align:left; dom-dir:ltr">   callgrind/callgrind_annotate</p>
<p style="Normal" xid="2417" props="text-align:left; dom-dir:ltr">   callgrind/callgrind_control</p>
<p style="Normal" xid="2418" props="text-align:left; dom-dir:ltr">   callgrind/tests/Makefile</p>
<p style="Normal" xid="2419" props="text-align:left; dom-dir:ltr">   helgrind/Makefile</p>
<p style="Normal" xid="2420" props="text-align:left; dom-dir:ltr">   helgrind/tests/Makefile</p>
<p style="Normal" xid="2421" props="text-align:left; dom-dir:ltr">   massif/Makefile</p>
<p style="Normal" xid="2422" props="text-align:left; dom-dir:ltr">   massif/tests/Makefile</p>
<p style="Normal" xid="2423" props="text-align:left; dom-dir:ltr">   massif/ms_print</p>
<p style="Normal" xid="2424" props="text-align:left; dom-dir:ltr">   lackey/Makefile</p>
<p style="Normal" xid="2425" props="text-align:left; dom-dir:ltr">   lackey/tests/Makefile</p>
<p style="Normal" xid="2426" props="text-align:left; dom-dir:ltr">   none/Makefile</p>
<p style="Normal" xid="2427" props="text-align:left; dom-dir:ltr">   none/tests/Makefile</p>
<p style="Normal" xid="2428" props="text-align:left; dom-dir:ltr">   none/tests/amd64/Makefile</p>
<p style="Normal" xid="2429" props="text-align:left; dom-dir:ltr">   none/tests/ppc32/Makefile</p>
<p style="Normal" xid="2430" props="text-align:left; dom-dir:ltr">   none/tests/ppc64/Makefile</p>
<p style="Normal" xid="2431" props="text-align:left; dom-dir:ltr">   none/tests/x86/Makefile</p>
<p style="Normal" xid="2432" props="text-align:left; dom-dir:ltr">   none/tests/arm/Makefile</p>
<p style="Normal" xid="2433" props="text-align:left; dom-dir:ltr">   none/tests/s390x/Makefile</p>
<p style="Normal" xid="2434" props="text-align:left; dom-dir:ltr">   none/tests/mips32/Makefile</p>
<p style="Normal" xid="2435" props="text-align:left; dom-dir:ltr">   none/tests/linux/Makefile</p>
<p style="Normal" xid="2436" props="text-align:left; dom-dir:ltr">   none/tests/darwin/Makefile</p>
<p style="Normal" xid="2437" props="text-align:left; dom-dir:ltr">   none/tests/x86-linux/Makefile</p>
<p style="Normal" xid="2438" props="text-align:left; dom-dir:ltr">   exp-sgcheck/Makefile</p>
<p style="Normal" xid="2439" props="text-align:left; dom-dir:ltr">   exp-sgcheck/tests/Makefile</p>
<p style="Normal" xid="2440" props="text-align:left; dom-dir:ltr">   drd/Makefile</p>
<p style="Normal" xid="2441" props="text-align:left; dom-dir:ltr">   drd/scripts/download-and-build-splash2</p>
<p style="Normal" xid="2442" props="text-align:left; dom-dir:ltr">   drd/tests/Makefile</p>
<p style="Normal" xid="2443" props="text-align:left; dom-dir:ltr">   exp-bbv/Makefile</p>
<p style="Normal" xid="2444" props="text-align:left; dom-dir:ltr">   exp-bbv/tests/Makefile</p>
<p style="Normal" xid="2445" props="text-align:left; dom-dir:ltr">   exp-bbv/tests/x86/Makefile</p>
<p style="Normal" xid="2446" props="text-align:left; dom-dir:ltr">   exp-bbv/tests/x86-linux/Makefile</p>
<p style="Normal" xid="2447" props="text-align:left; dom-dir:ltr">   exp-bbv/tests/amd64-linux/Makefile</p>
<p style="Normal" xid="2448" props="text-align:left; dom-dir:ltr">   exp-bbv/tests/ppc32-linux/Makefile</p>
<p style="Normal" xid="2449" props="text-align:left; dom-dir:ltr">   exp-bbv/tests/arm-linux/Makefile</p>
<p style="Normal" xid="2450" props="text-align:left; dom-dir:ltr">   exp-dhat/Makefile</p>
<p style="Normal" xid="2451" props="text-align:left; dom-dir:ltr">   exp-dhat/tests/Makefile</p>
<p style="Normal" xid="2452" props="text-align:left; dom-dir:ltr">   sconvcheck/Makefile</p>
<p style="Normal" xid="2453" props="text-align:left; dom-dir:ltr">   sconvcheck/tests/Makefile</p>
<p style="Normal" xid="2454">   </p>
<p style="Normal" xid="2455">])</p>
<p style="Normal" xid="2456" props="text-align:left; dom-dir:ltr">AC_CONFIG_FILES([coregrind/link_tool_exe_linux],</p>
<p style="Normal" xid="2457" props="text-align:left; dom-dir:ltr">                [chmod +x coregrind/link_tool_exe_linux])</p>
<p style="Normal" xid="2458" props="text-align:left; dom-dir:ltr">AC_CONFIG_FILES([coregrind/link_tool_exe_darwin],</p>
<p style="Normal" xid="2459" props="text-align:left; dom-dir:ltr">                [chmod +x coregrind/link_tool_exe_darwin])</p>
<p style="Normal" xid="2460" props="text-align:left; dom-dir:ltr">AC_OUTPUT</p>
<p style="Normal" xid="2461"><c></c></p>
<p style="Normal" xid="2462" props="text-align:left; dom-dir:ltr">cat&lt;&lt;EOF</p>
<p style="Normal" xid="2463"><c></c></p>
<p style="Normal" xid="2464" props="text-align:left; dom-dir:ltr">         Maximum build arch: ${ARCH_MAX}</p>
<p style="Normal" xid="2465" props="text-align:left; dom-dir:ltr">         Primary build arch: ${VGCONF_ARCH_PRI}</p>
<p style="Normal" xid="2466" props="text-align:left; dom-dir:ltr">       Secondary build arch: ${VGCONF_ARCH_SEC}</p>
<p style="Normal" xid="2467" props="text-align:left; dom-dir:ltr">                   Build OS: ${VGCONF_OS}</p>
<p style="Normal" xid="2468" props="text-align:left; dom-dir:ltr">       Primary build target: ${VGCONF_PLATFORM_PRI_CAPS}</p>
<p style="Normal" xid="2469" props="text-align:left; dom-dir:ltr">     Secondary build target: ${VGCONF_PLATFORM_SEC_CAPS}</p>
<p style="Normal" xid="2470" props="text-align:left; dom-dir:ltr">           Platform variant: ${VGCONF_PLATVARIANT}</p>
<p style="Normal" xid="2471" props="text-align:left; dom-dir:ltr">      Primary -DVGPV string: -DVGPV_${VGCONF_ARCH_PRI}_${VGCONF_OS}_${VGCONF_PLATVARIANT}=1</p>
<p style="Normal" xid="2472" props="text-align:left; dom-dir:ltr">         Default supp files: ${DEFAULT_SUPP}</p>
<p style="Normal" xid="2473"><c></c></p>
<p style="Normal" xid="2474" props="text-align:left; dom-dir:ltr">EOF</p>
<p style="Normal" xid="2475"></p>
</section>
</abiword>
